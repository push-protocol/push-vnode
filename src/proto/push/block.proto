syntax = "proto3";
package push;

// BLOCK ---------------------------------------------------------------------------------------------------------------

enum Role {
    ROLE_UNSPECIFIED = 0;
    VALIDATOR = 1;
    ATTESTER = 2;
}

enum Vote {
    VOTE_UNSPECIFIED = 0;
    ACCEPTED = 1;
    REJECTED = 2;
}

message DidMapping {
    map<string, string> didMapping = 1;
}


// section added by a block producer (we call him Validator in the context of the block)
message TxValidatorData {
    // any validator can vote if he supports the tx or not
    Vote vote = 1;
    // additional context goes below.
    // if it is signed = all attestors agree with this context of tx processing
    DidMapping didMapping = 2;
}

// section added by a block attester
// offset0 = block producer vote
// offset1..N = block attestor votes
message TxAttestorData {
    // any attestor can vote if he supports the tx or not
    Vote vote = 1;
    // any additional fields below, that attestor wants to add for the 'storage' layer
    // i.e. repeated string spam
}

// transaction with voting data
message TransactionObj {
    // raw bytes: you need to decode this based on category into a Transaction
    Transaction tx = 1;
    // validator(block producer) processes 'data' field and fills this output
    TxValidatorData validatorData = 2;
    // attestors process 'data' and 'metaData' and fill this output
    repeated TxAttestorData attestorData = 3;
}

message Signer {
    // deprecated
    // string node = 1;
    // deprecated
    // Role role = 2;

    bytes sig = 1;
}

message Block {
    // block timestamp in millis;
    uint64 ts = 1;
    bytes attestToken = 4;
    repeated TransactionObj txObj = 2;
    repeated Signer signers = 3;
}

message AttestorReply {
   // reply per transaction (same order as in block)
   repeated TxAttestorData attestorData = 1;
   // signature for the whole block
   // assuming that on this node TxAttestorData is filled per every tx
   Signer signer = 2;
}

message AttestorReplies {
   repeated AttestorReply attestations = 1;
}


// TRANSACTION ---------------------------------------------------------------------------------------------------------


message Transaction {
    uint32 type = 1;         // 0 for non-value, 1 for value
    string category = 2;     // INIT_DID, INIT_SESSION_KEY, NOTIF, EMAIL
    string sender = 3;
    repeated string recipients = 4;
    bytes data = 5;          // data is also a protobuf message, depending on tx_type
    bytes salt = 6;
    bytes apiToken = 7;  // f(apiToken) = v1
    bytes signature = 8;
    string fee = 9;          // we don't use this as of now, no native 256bits int support in protobuf
}



// PAYLOADS ------------------------------------------------------------------------------------------------------------


message EncryptedText {
    string ciphertext = 1;
    string salt = 2;
    string nonce = 3;
    string version = 4; 
    string preKey = 5;
  }

message WalletToEncDerivedKey {
    EncryptedText encDerivedPrivKey = 1;
    // Helps Vnode to proof that encryptedData is indeed signed by account
    bytes signature = 2;
}
// INIT_DID

message InitDid {
    string masterPubKey = 1;
    uint32 derivedKeyIndex = 2;
    string derivedPubKey = 3;
    map<string, WalletToEncDerivedKey> walletToEncDerivedKey = 4;
}

enum KeyAction {
    UNSPECIFIED = 0;
    PUBLISH_KEY = 1;
    REVOKE_KEY = 2;
}

// INIT_SESSION_KEY

message SessionKeyAction {
    int32 keyIndex = 1;
    string keyAddress = 2;
    KeyAction action = 3;
}

// NOTIFICATION

// PlainText Notification
// represents a targeted notificaiton with up to 1000 recipients (this is defined by a top level transaction)
message Notification {
    // the app which sends the notif, i.e. "ShapeShift"
    string app = 1;
    // notification title, i.e. "ShapeShift - 2 PUFETH received!"
    string title = 2;
    // notification body, i.e. ""ðŸ“© Sender: 0x4bd5â€¦7170\nðŸ‘¤ Receiver: 0x121dâ€¦876e (you)\nðŸª™ Asset: PUFETH\nðŸ’° Amount: 2\n""
    string body = 3;
    // TBD: clear definition of this field ????????????????????????????
    string channelUrl = 4;
    // on click action, i.e. "https://etherscan.io/tx/0x3c93fd0617c5f7431d2899fa8e7ccea0ec09d4210a96c68b0fddf5772833871e"
    string actionUrl = 5;
    // big image url
    string img = 6;
    // small image url
    string icon = 7;
}

// Encrypted Notificaiton
enum EncryptionType {
    ENCRYPTION_UNSPECIFIED = 0;
    ECC = 1;
}

message EncryptionDetails {
    string recipientDID = 1;
    EncryptionType type = 2;
    int32 keyIndex = 3;
    bytes encryptedSecret = 4;
}

message EncryptedNotif {
    bytes encryptedNotif = 1;
    EncryptionDetails sourceEnc = 2;
    repeated EncryptionDetails targetEnc = 3;
}

// EMAIL

message Attachment {
    string filename = 1;
    string type = 2;
    string content = 3;  // base64 encoded
}

message Email {
    string subject = 1;
    string body = 2;  // Plain text or HTML body of the email
    repeated Attachment attachments = 3;
}
