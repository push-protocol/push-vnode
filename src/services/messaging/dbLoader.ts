import {WinstonUtil} from "../../utilz/winstonUtil";
import {EnvLoader} from "../../utilz/envLoader";
import pgPromise from "pg-promise";
import {IClient} from "pg-promise/typescript/pg-subset";
import {PgUtil} from "../../utilz/pgUtil";

const log = WinstonUtil.newLog('pg');

export class DbLoader {

  static PG_POOL = null;

  static async initPostgres() {
    const options = {
      query: function (e) {
        log.debug('', e.query)
        if (e.params) {
          log.debug('PARAMS: ', e.params)
        }
      }
    }
    const PG_USER = EnvLoader.getPropertyOrFail('PG_USER');
    const PG_PASS = EnvLoader.getPropertyOrFail('PG_PASS');
    const PG_HOST = EnvLoader.getPropertyOrFail('PG_HOST');
    const PG_PORT = EnvLoader.getPropertyOrDefault('PG_PORT', "5432");
    const DB_NAME = EnvLoader.getPropertyOrFail('DB_NAME');
    log.info('PG_HOST=%s PG_PORT=%s PG_USER=%s DB_NAME=%s', PG_HOST, PG_PORT, PG_USER, DB_NAME);
    const PG_URL = `postgres://${PG_USER}:${PG_PASS}@${PG_HOST}:${PG_PORT}/${DB_NAME}`;
    const pg: pgPromise.IMain<{}, IClient> = pgPromise(options)
    DbLoader.PG_POOL = pg(PG_URL);
    PgUtil.init(DbLoader.PG_POOL)
  }

  static async initTables() {
    // ! new pg syntax: https://stackoverflow.com/questions/7718585/how-to-set-auto-increment-primary-key-in-postgresql
    await PgUtil.update(`
      CREATE TABLE IF NOT EXISTS dset_client
      (
          id              INTEGER      GENERATED BY DEFAULT AS IDENTITY NOT NULL,
          queue_name      VARCHAR(32)  NOT NULL,
          target_node_id  VARCHAR(128) NOT NULL,
          target_node_url VARCHAR(128) NOT NULL,
          target_offset   BIGINT       NOT NULL DEFAULT 0,
          state           BOOLEAN      NOT NULL DEFAULT TRUE,
          PRIMARY KEY (id),
          CONSTRAINT uniq_dset_name_and_target UNIQUE (queue_name, target_node_id)
      );

      COMMENT ON COLUMN dset_client.queue_name IS 'target node queue name';
      COMMENT ON COLUMN dset_client.target_node_id IS 'target node eth address';
      COMMENT ON COLUMN dset_client.target_node_url IS 'target node url, filled from the contract';
      COMMENT ON COLUMN dset_client.target_offset IS 'initial offset to fetch target queue';
      COMMENT ON COLUMN dset_client.state IS '1 = enabled, 0 = disabled';
  `);

    await PgUtil.update(`
      CREATE TABLE IF NOT EXISTS dset_queue_mblock
      (
          id          BIGINT       GENERATED BY DEFAULT AS IDENTITY NOT NULL,
          object_hash VARCHAR(255),
          object      TEXT         NOT NULL,
          PRIMARY KEY (id),
          CONSTRAINT uniq_mblock_object_hash UNIQUE (object_hash)
      );

      COMMENT ON COLUMN dset_queue_mblock.object_hash IS 'optional: a uniq field to fight duplicates';
  `);

    await PgUtil.update(`
      CREATE TABLE IF NOT EXISTS dset_queue_subscribers
      (
          id          BIGINT       GENERATED BY DEFAULT AS IDENTITY NOT NULL,
          object_hash VARCHAR(255),
          object      TEXT         NOT NULL,
          PRIMARY KEY (id)
      );

      COMMENT ON COLUMN dset_queue_subscribers.object_hash IS 'optional: a uniq field to fight duplicates';
  `);

    await PgUtil.update(`
      CREATE TABLE IF NOT EXISTS tx_status
      (
          hash    VARCHAR(100) NOT NULL,
          status  VARCHAR(32)  NOT NULL,
          status_ex TEXT         NOT NULL,
          PRIMARY KEY (hash)
      );
  `);
  }
}