// noinspection DuplicatedCode

import 'mocha'
import chai from 'chai'
import {
  Block, EncryptedText,
  InitDid,
  Signer,
  Transaction,
  TransactionObj,
  TxAttestorData,
  TxValidatorData, WalletToEncDerivedKey
} from "../../src/generated/push/block_pb";
import IdUtil from "../../src/utilz/idUtil";
import {BitUtil} from "../../src/utilz/bitUtil";
import {HashUtil} from "../../src/utilz/hashUtil";
import DateUtil from "../../src/utilz/dateUtil";
import {BlockUtil} from "../../src/services/messaging-common/blockUtil";
import {Wallet} from "ethers";
import fs from "fs";
import {Check} from "../../src/utilz/check";
import * as jspb from "google-protobuf";
import StrUtil from "../../src/utilz/strUtil";
import {NetworkRandom} from "../../src/services/messaging/validatorRandom";

const expect = chai.expect;

type WalletInfo = {
  address: string;
  publicKey: string;
  privateKey: string;
};


let WALLET_INFOS : WalletInfo[] = [
  {
    address: '0x8e12dE12C35eABf35b56b04E53C4E468e46727E8',
    publicKey: '0x044c6cc0547e97253814528c616fbb3aa6ebd4a306cf43521a8f9a2ee187d1c3a70adba740eb5592c68f408cf848eb9621985e5c269ec37ad27845a542ae8c6afd',
    privateKey: '0x33fb23f822c5dba0f3cb2796b90d56bb553ebd215726398c93374440b34e510b'
  },
  {
    address: '0xfDAEaf7afCFbb4e4d16DC66bD2039fd6004CFce8',
    publicKey: '0x04f4c9461d8babf5962f48e3ed1f94748247d330eca80dba31986055b6c05c97d13a4f99c4cf3e304ab803f99042978a386ed08f56d68dda59948ea8a70918f157',
    privateKey: '0x16c90855a0dfc9884adf2625a4bffcdbfe760d5ff6756a766d2bbc0bc82318f0'
  },
  {
    address: '0x98F9D910Aef9B3B9A45137af1CA7675eD90a5355',
    publicKey: '0x043b668e94ed022dc14a48a730421b5e6b83fccea79de60d7eb2627743020431be0a6746a885327d5fccd10ccc046659f58e880c4b8009a4e028a42497d1ccd157',
    privateKey: '0xb6c538bac86eb0964b16b7ff6a1ac7d5f0736dcbd0f00bd142ae433dad27f685'
  }
];

let VALID_VNODES = new Set<string>(WALLET_INFOS.map((wallet) => wallet.address));


function getNodeWallet(index:number):Wallet {
  return new Wallet(WALLET_INFOS[index].privateKey);
}

function printObj(msg:string, obj:any) {
  console.log(msg);
  console.log('%s\n%s', StrUtil.fmtProtoBytes(obj), StrUtil.fmtProtoObj(obj));
}

describe('block tests', function () {
/*
  it('test attest token', async function () {
    let token = "eyJub2RlcyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMjQsInJhbmRvbUhleCI6ImIyNjdjYTFlZmFiY2Y4YmQyMGNiN2NhYzY1YzBjNTQyOGVlZmRmMzgiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMjAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNjE0ODY3MDAxNiwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4NDZjMWQyNzFmYzg2NzQ0NTkxODVhMmFiZWNmNzc3NjI5YTAxMzcwZjQzZjA3ZjQ5ZWI0MTYyNWFlZWVmMWQwMzVkMTlmZDJhZDJkNzIyMjcxYjQxZjNlNmNiMWU3NTAzODQ3MDZhYjgzNjY0NzY4N2U1OTRjYmNkYmNmMjFhZWYxYiJ9LHsibm9kZUlkIjoiMHg5OEY5RDkxMEFlZjlCM0I5QTQ1MTM3YWYxQ0E3Njc1ZUQ5MGE1MzU1IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMjksInJhbmRvbUhleCI6ImMxZmIzOWE4MjJiOWQ4MmFkMmQ3NDczMjBiYWU4NjQwNjQ4ZjI1YTciLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMTcsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweGZEQUVhZjdhZkNGYmI0ZTRkMTZEQzY2YkQyMDM5ZmQ2MDA0Q0ZjZTgiLCJ0c01pbGxpcyI6MTcyNjE0ODY3MDAyNCwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4ZmY3NzZlYzk3NjBiNWRhNDcyODIxMDM4YmRmMWRjY2VhYjMxMGZlMTIwMDdiYjNmNDNmNjRiNjQ1NTAyZGY0ZjM3MzIyNDMwZmUzMzZlNTE2YTVjNmE3NDYwODU0ZTQwMzBiNTYzNDQ2M2RjOGEwZGExNThhMWIwYzc4YTI2MGUxYiJ9LHsibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMzUsInJhbmRvbUhleCI6ImI5MzFlYzQxYjM5N2NiMWRlYjQ5ZTY1N2Q5ZDdiNzk4N2QxY2E3NTAiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMTUsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNjE0ODY3MDAyNSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4N2M5ZDQ4MjljNmFhYTY1NTlkZWQ4MzI0M2I2ZThkOGI2ZWIzMzZkOTA5MmEyYTBkZjI1MzFkYzNjZDllMmIzNTU3NWJkYjhiYTExNDIyYzJmYzRiYjY3N2UwZDljZTViZjQ0ZDU0ZmU1ODcyZjllMDc2YWMzOWQ1MDFiNzQ5NDMxYyJ9XX0=";
    const nr = NetworkRandom.read(token)
    const attestVector = ValidatorRandom.createValidationVector(
      this.log,
      this.contractState.getValidatorNodesMap(),
      this.contractState.contractCli.valPerBlock - 1,
      nr,
      'attest',
      this.contractState.contractCli.nodeRandomMinCount,
      this.contractState.contractCli.nodeRandomPingCount,
      [validatorNodeId]
    )
  })*/

  it('Block Validation Test', async function () {
    // this blob is made by feeding 'sample transaction 1' test case hex into the test net of 3 nodes
    let blockBase16 = "08dce4d5e1a632229c0f65794a756232526c6379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a677a4f5449794f4441774d6a4573496e4a68626d52766255686c65434936496a6c6c59546469595745314d474d35597a63354f444d794f545a68597a497a4d7a4d324e54493559544e694e474930595441784d3255694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a677a4f5449794f4441774d545973496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f444d354d6a49344d4441784e537769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42345a6a63774f4749304f47457a4d4463794d6d466c4f4441794e4468695a6d45314d4745344d5755304e4449774e7a67334d4745354e54686a4e5445344e546b314e6d4d30597a55795a445a684e544135596d49344e6a526d4f47466b595459784d3252684d6a4a6c4e5745304e44566c5a4445304d6a59354d446b354d6a457a596a646a596a63315954466b597a5933595759344e6d59795954426a5a4441784f44517a5a445931597a597859694a394c487369626d396b5a556c6b496a6f694d4867354f45593552446b784d45466c5a6a6c434d304935515451314d544d3359575978513045334e6a63315a5551354d4745314d7a55314969776964484e4e6157787361584d694f6a45334d6a677a4f5449794f4441774d6a4573496e4a68626d52766255686c65434936496a51794e5755345932466d4d546335596a4e6b4d47566d596d45354d7a526c4d7a6b304d5755774d54413059546377596a6c684f5455694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a677a4f5449794f4441774d546373496e4e3059585231637949364d58307365794a756232526c535751694f69497765475a45515556685a6a64685a6b4e47596d49305a54526b4d545a45517a5932596b51794d444d355a6d51324d44413051305a6a5a5467694c434a306330317062477870637949364d5463794f444d354d6a49344d4441784e797769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a423459575a6b4d6a42694e5455784d5467794e575268595751324e444e684f4755314d3249314f446c6c4e5449344d7a67784d6a56694e445a6a4e6a45354f44566b4f446b7a4f5755345a474d7a4d7a59345a574e6c4e54566c4e7a51344e6d49344e7a49344d5751314d7a5130595445785a6a526a596d51334d445a6a4e3256685a57597a4d5455344d7a6b324d6a59355a546c6b596d4a6b4f546c6b5a54597a4e5752684d6a45324e7a637859794a394c487369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a677a4f5449794f4441774d6a4973496e4a68626d52766255686c65434936496a59345a6a63354e6d4a6d4e5759344f474e685a544e6b4e6d4d7a4d574a6d595455794f444d304f57566a5a44646c4d575a685a6d4d694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a677a4f5449794f4441774d545573496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f444d354d6a49344d4441784e697769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42345a54466c4e4751345a446c6b596d466a595746685a546335595442694e5449794d44646b5a5459784f44517a4d7a67785a474e6c5a574d314e6d59354d475a6c596a4a6a4e6a51304e4745334f474a694d5755344d444978595445794d6d5a695a6a526b596d5a6d5a474d775a54466d59324d304f54646d5954646d4e5441314e7a67355a4751784d57517a5a4467774e324d324e7a49304f4467304d4467315a474e6b4e574d79597a457859794a395858303d12fc0d0aed0d1208494e49545f4449441a336569703135353a313a30783335423834643638343844313634313531373763363444363435303436363362393938413661623422336569703135353a313a30783335423834643638343844313634313531373763363444363435303436363362393938413661623422346569703135353a39373a3078443836333443333942424664343033336330643332383943343531353237353130323432333638312a320a043078424210011a043078434322220a0430784141121a0a130a03717765120371617a2207707573683a76351203112233321071d60eecc00f4cc8ac898784a7eeb98f3ab40b7b226e6f646573223a5b7b226e6f64654964223a22307838653132644531324333356541426633356235366230344535334334453436386534363732374538222c2274734d696c6c6973223a313732363134383637303032342c2272616e646f6d486578223a2262323637636131656661626366386264323063623763616336356330633534323865656664663338222c2270696e67526573756c7473223a5b7b226e6f64654964223a22307866444145616637616643466262346534643136444336366244323033396664363030344346636538222c2274734d696c6c6973223a313732363134383637303032302c22737461747573223a317d2c7b226e6f64654964223a22307839384639443931304165663942334239413435313337616631434137363735654439306135333535222c2274734d696c6c6973223a313732363134383637303031362c22737461747573223a317d5d2c227369676e6174757265223a22307834366331643237316663383637343435393138356132616265636637373736323961303133373066343366303766343965623431363235616565656631643033356431396664326164326437323232373162343166336536636231653735303338343730366162383336363437363837653539346362636462636632316165663162227d2c7b226e6f64654964223a22307839384639443931304165663942334239413435313337616631434137363735654439306135333535222c2274734d696c6c6973223a313732363134383637303032392c2272616e646f6d486578223a2263316662333961383232623964383261643264373437333230626165383634303634386632356137222c2270696e67526573756c7473223a5b7b226e6f64654964223a22307838653132644531324333356541426633356235366230344535334334453436386534363732374538222c2274734d696c6c6973223a313732363134383637303031372c22737461747573223a317d2c7b226e6f64654964223a22307866444145616637616643466262346534643136444336366244323033396664363030344346636538222c2274734d696c6c6973223a313732363134383637303032342c22737461747573223a317d5d2c227369676e6174757265223a22307866663737366563393736306235646134373238323130333862646631646363656162333130666531323030376262336634336636346236343535303264663466333733323234333066653333366535313661356336613734363038353465343033306235363334343633646338613064613135386131623063373861323630653162227d2c7b226e6f64654964223a22307866444145616637616643466262346534643136444336366244323033396664363030344346636538222c2274734d696c6c6973223a313732363134383637303033352c2272616e646f6d486578223a2262393331656334316233393763623164656234396536353764396437623739383764316361373530222c2270696e67526573756c7473223a5b7b226e6f64654964223a22307838653132644531324333356541426633356235366230344535334334453436386534363732374538222c2274734d696c6c6973223a313732363134383637303031352c22737461747573223a317d2c7b226e6f64654964223a22307839384639443931304165663942334239413435313337616631434137363735654439306135333535222c2274734d696c6c6973223a313732363134383637303032352c22737461747573223a317d5d2c227369676e6174757265223a22307837633964343832396336616161363535396465643833323433623665386438623665623333366439303932613261306466323533316463336364396532623335353735626462386261313134323263326663346262363737653064396365356266343464353466653538373266396530373661633339643530316237343934333163227d5d7d42412592af30c62ac73025e37826d60a250e7c4f44c3697d2868307255bcff52a4b61e9a3fa015761ebd89b3d9d1ce3e4a7ad4691c5259e56f8be2e79a486a1eb01b1b4a0130120208011a0208011a0208011a430a41a8c917e7840bc32184aec37368e8f8b710390c22fc995e9b2c9953de6350fa260d2e6561f12e2284530459bfe12a6f268ae1949d4fab45d515c4cafda6967a4b1b1a430a412129c445d825f37cb921f34229b499909b4db2a89fbd7eda16222a00bb99ecf312caa719d7bd8be0817c0bd879a75559a745b467db6fd62cae079dd682d6f10d1c1a430a41c7430aafed744e7c080eaa8a46187aebed4731f7245a6662f254799f885928a004f8bfca465555bffed7fb5842d9deae841929fd1bb6bbe2a43b73402f3d5d291b";

    // parse a pre-computed block

    let oldBlock = Block.deserializeBinary(BitUtil.base16ToBytes(blockBase16));
    printObj('parsed Block', oldBlock);
    console.log('block is %o', oldBlock.toObject());
    BlockUtil.ATTESTOR_MAX_BLOCK_AGE_SECONDS = 0;
    let check1 = await BlockUtil.checkBlockFinalized(oldBlock, VALID_VNODES, 3);

    expect(check1.success).to.be.equal(true, check1.err);
    let oldBlockBytes = oldBlock.serializeBinary();
    let oldTxBytes = oldBlock.getTxobjList()[0].getTx().serializeBinary();
    let oldTxDataBytes = oldBlock.getTxobjList()[0].getTx().getData_asU8();
    let initDidParsed = InitDid.deserializeBinary(oldTxDataBytes);
    printObj('parsed InitDid', initDidParsed);

    // now build the same block manually + Compare

    // build transaction data ------------------------------------
    const data = new InitDid();
    data.setMasterpubkey('0xBB');
    data.setDerivedkeyindex(1);
    data.setDerivedpubkey('0xCC');

    let et = new EncryptedText();
    et.setSalt('qaz');
    et.setNonce('');
    et.setVersion('push:v5');
    et.setPrekey('');
    et.setCiphertext('qwe');
    let wa = new WalletToEncDerivedKey();
    wa.setEncderivedprivkey(et);
    wa.setSignature(BitUtil.base16ToBytes("112233"));
    data.getWallettoencderivedkeyMap().set('0xAA', wa);
    printObj('new InitDid', data);
    expect(oldTxDataBytes).to.deep.equal(data.serializeBinary());

    // build transaction ------------------------------------
    const t = new Transaction();
    t.setType(0);
    t.setCategory('INIT_DID');
    t.setSender('eip155:1:0x35B84d6848D16415177c64D64504663b998A6ab4');
    t.setRecipientsList(['eip155:1:0x35B84d6848D16415177c64D64504663b998A6ab4', 'eip155:97:0xD8634C39BBFd4033c0d3289C4515275102423681']);
    t.setData(data.serializeBinary())
    t.setSalt(BitUtil.base64ToBytes('cdYO7MAPTMisiYeEp+65jw=='));
    t.setApitoken(BitUtil.base64ToBytes('eyJub2RlcyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMjQsInJhbmRvbUhleCI6ImIyNjdjYTFlZmFiY2Y4YmQyMGNiN2NhYzY1YzBjNTQyOGVlZmRmMzgiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMjAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNjE0ODY3MDAxNiwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4NDZjMWQyNzFmYzg2NzQ0NTkxODVhMmFiZWNmNzc3NjI5YTAxMzcwZjQzZjA3ZjQ5ZWI0MTYyNWFlZWVmMWQwMzVkMTlmZDJhZDJkNzIyMjcxYjQxZjNlNmNiMWU3NTAzODQ3MDZhYjgzNjY0NzY4N2U1OTRjYmNkYmNmMjFhZWYxYiJ9LHsibm9kZUlkIjoiMHg5OEY5RDkxMEFlZjlCM0I5QTQ1MTM3YWYxQ0E3Njc1ZUQ5MGE1MzU1IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMjksInJhbmRvbUhleCI6ImMxZmIzOWE4MjJiOWQ4MmFkMmQ3NDczMjBiYWU4NjQwNjQ4ZjI1YTciLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMTcsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweGZEQUVhZjdhZkNGYmI0ZTRkMTZEQzY2YkQyMDM5ZmQ2MDA0Q0ZjZTgiLCJ0c01pbGxpcyI6MTcyNjE0ODY3MDAyNCwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4ZmY3NzZlYzk3NjBiNWRhNDcyODIxMDM4YmRmMWRjY2VhYjMxMGZlMTIwMDdiYjNmNDNmNjRiNjQ1NTAyZGY0ZjM3MzIyNDMwZmUzMzZlNTE2YTVjNmE3NDYwODU0ZTQwMzBiNTYzNDQ2M2RjOGEwZGExNThhMWIwYzc4YTI2MGUxYiJ9LHsibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMzUsInJhbmRvbUhleCI6ImI5MzFlYzQxYjM5N2NiMWRlYjQ5ZTY1N2Q5ZDdiNzk4N2QxY2E3NTAiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMTUsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNjE0ODY3MDAyNSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4N2M5ZDQ4MjljNmFhYTY1NTlkZWQ4MzI0M2I2ZThkOGI2ZWIzMzZkOTA5MmEyYTBkZjI1MzFkYzNjZDllMmIzNTU3NWJkYjhiYTExNDIyYzJmYzRiYjY3N2UwZDljZTViZjQ0ZDU0ZmU1ODcyZjllMDc2YWMzOWQ1MDFiNzQ5NDMxYyJ9XX0=')); // fake token
    t.setFee("0"); // tbd
    // todo fake signature ; grab real eth wallet here
    t.setSignature(BitUtil.base64ToBytes('JZKvMMYqxzAl43gm1golDnxPRMNpfShoMHJVvP9SpLYemj+gFXYevYmz2dHOPkp61GkcUlnlb4vi55pIah6wGxs='));

    printObj('new Transaction', t);
    printObj('old Transaction', oldBlock.getTxobjList()[0].getTx());
    expect(oldTxBytes).to.deep.equal(t.serializeBinary());

    {
      const to1 = new TransactionObj();
      to1.setTx(t);
      const vd1 = new TxValidatorData();
      vd1.setVote(1);

      // block (BE VERY CAREFUL WITH THIS TEST)
      const block1 = new Block();
      // NOTE: comes from BLOB to be bit-equal
      block1.setTs(1728392295004);
      block1.setTxobjList([to1]);
      // NOTE: comes from BLOB to be bit-equal
      block1.setAttesttoken('ZXlKdWIyUmxjeUk2VzNzaWJtOWtaVWxrSWpvaU1IaG1SRUZGWVdZM1lXWkRSbUppTkdVMFpERTJSRU0yTm1KRU1qQXpPV1prTmpBd05FTkdZMlU0SWl3aWRITk5hV3hzYVhNaU9qRTNNamd6T1RJeU9EQXdNakVzSW5KaGJtUnZiVWhsZUNJNklqbGxZVGRpWVdFMU1HTTVZemM1T0RNeU9UWmhZekl6TXpNMk5USTVZVE5pTkdJMFlUQXhNMlVpTENKd2FXNW5VbVZ6ZFd4MGN5STZXM3NpYm05a1pVbGtJam9pTUhnNFpURXlaRVV4TWtNek5XVkJRbVl6TldJMU5tSXdORVUxTTBNMFJUUTJPR1UwTmpjeU4wVTRJaXdpZEhOTmFXeHNhWE1pT2pFM01qZ3pPVEl5T0RBd01UWXNJbk4wWVhSMWN5STZNWDBzZXlKdWIyUmxTV1FpT2lJd2VEazRSamxFT1RFd1FXVm1PVUl6UWpsQk5EVXhNemRoWmpGRFFUYzJOelZsUkRrd1lUVXpOVFVpTENKMGMwMXBiR3hwY3lJNk1UY3lPRE01TWpJNE1EQXhOU3dpYzNSaGRIVnpJam94ZlYwc0luTnBaMjVoZEhWeVpTSTZJakI0Wmpjd09HSTBPR0V6TURjeU1tRmxPREF5TkRoaVptRTFNR0U0TVdVME5ESXdOemczTUdFNU5UaGpOVEU0TlRrMU5tTTBZelV5WkRaaE5UQTVZbUk0TmpSbU9HRmtZVFl4TTJSaE1qSmxOV0UwTkRWbFpERTBNalk1TURrNU1qRXpZamRqWWpjMVlURmtZelkzWVdZNE5tWXlZVEJqWkRBeE9EUXpaRFkxWXpZeFlpSjlMSHNpYm05a1pVbGtJam9pTUhnNU9FWTVSRGt4TUVGbFpqbENNMEk1UVRRMU1UTTNZV1l4UTBFM05qYzFaVVE1TUdFMU16VTFJaXdpZEhOTmFXeHNhWE1pT2pFM01qZ3pPVEl5T0RBd01qRXNJbkpoYm1SdmJVaGxlQ0k2SWpReU5XVTRZMkZtTVRjNVlqTmtNR1ZtWW1FNU16UmxNemswTVdVd01UQTBZVGN3WWpsaE9UVWlMQ0p3YVc1blVtVnpkV3gwY3lJNlczc2libTlrWlVsa0lqb2lNSGc0WlRFeVpFVXhNa016TldWQlFtWXpOV0kxTm1Jd05FVTFNME0wUlRRMk9HVTBOamN5TjBVNElpd2lkSE5OYVd4c2FYTWlPakUzTWpnek9USXlPREF3TVRjc0luTjBZWFIxY3lJNk1YMHNleUp1YjJSbFNXUWlPaUl3ZUdaRVFVVmhaamRoWmtOR1ltSTBaVFJrTVRaRVF6WTJZa1F5TURNNVptUTJNREEwUTBaalpUZ2lMQ0owYzAxcGJHeHBjeUk2TVRjeU9ETTVNakk0TURBeE55d2ljM1JoZEhWeklqb3hmVjBzSW5OcFoyNWhkSFZ5WlNJNklqQjRZV1prTWpCaU5UVXhNVGd5TldSaFlXUTJORE5oT0dVMU0ySTFPRGxsTlRJNE16Z3hNalZpTkRaak5qRTVPRFZrT0Rrek9XVTRaR016TXpZNFpXTmxOVFZsTnpRNE5tSTROekk0TVdRMU16UTBZVEV4WmpSalltUTNNRFpqTjJWaFpXWXpNVFU0TXprMk1qWTVaVGxrWW1Ka09UbGtaVFl6TldSaE1qRTJOemN4WXlKOUxIc2libTlrWlVsa0lqb2lNSGc0WlRFeVpFVXhNa016TldWQlFtWXpOV0kxTm1Jd05FVTFNME0wUlRRMk9HVTBOamN5TjBVNElpd2lkSE5OYVd4c2FYTWlPakUzTWpnek9USXlPREF3TWpJc0luSmhibVJ2YlVobGVDSTZJalk0WmpjNU5tSm1OV1k0T0dOaFpUTmtObU16TVdKbVlUVXlPRE0wT1dWalpEZGxNV1poWm1NaUxDSndhVzVuVW1WemRXeDBjeUk2VzNzaWJtOWtaVWxrSWpvaU1IaG1SRUZGWVdZM1lXWkRSbUppTkdVMFpERTJSRU0yTm1KRU1qQXpPV1prTmpBd05FTkdZMlU0SWl3aWRITk5hV3hzYVhNaU9qRTNNamd6T1RJeU9EQXdNVFVzSW5OMFlYUjFjeUk2TVgwc2V5SnViMlJsU1dRaU9pSXdlRGs0UmpsRU9URXdRV1ZtT1VJelFqbEJORFV4TXpkaFpqRkRRVGMyTnpWbFJEa3dZVFV6TlRVaUxDSjBjMDFwYkd4cGN5STZNVGN5T0RNNU1qSTRNREF4Tml3aWMzUmhkSFZ6SWpveGZWMHNJbk5wWjI1aGRIVnlaU0k2SWpCNFpURmxOR1E0WkRsa1ltRmpZV0ZoWlRjNVlUQmlOVEl5TURka1pUWXhPRFF6TXpneFpHTmxaV00xTm1ZNU1HWmxZakpqTmpRME5HRTNPR0ppTVdVNE1ESXhZVEV5TW1aaVpqUmtZbVptWkdNd1pURm1ZMk0wT1RkbVlUZG1OVEExTnpnNVpHUXhNV1F6WkRnd04yTTJOekkwT0RnME1EZzFaR05rTldNeVl6RXhZeUo5WFgwPQ==');

      await BlockUtil.signBlockAsValidator(getNodeWallet(0), block1);

      let patch1 = await BlockUtil.signBlockAsAttestor(getNodeWallet(1), block1);
      let patch2 = await BlockUtil.signBlockAsAttestor(getNodeWallet(2), block1);

      let addr1 = await BlockUtil.recoverPatchAddress(getNodeWallet(0), block1, patch1);
      expect(addr1).to.equal(getNodeWallet(1).address);

      let addr2 = await BlockUtil.recoverPatchAddress(getNodeWallet(0), block1, patch2);
      expect(addr2).to.equal(getNodeWallet(2).address);

      await BlockUtil.appendPatchAsValidator(getNodeWallet(0), block1, patch2); // NODE 2 goes 1st because my sample blob has this
      await BlockUtil.appendPatchAsValidator(getNodeWallet(0), block1, patch1);

      expect(await BlockUtil.recoverSignerAddress(block1, 0)).to.be.equal(getNodeWallet(0).address);
      expect(await BlockUtil.recoverSignerAddress(block1, 1)).to.be.equal(getNodeWallet(2).address); // NODE 2 goes 1st because my sample blob has this
      expect(await BlockUtil.recoverSignerAddress(block1, 2)).to.be.equal(getNodeWallet(1).address);

      printObj('new Block', block1);
      printObj('old Block', oldBlock);
      expect(oldBlockBytes).to.deep.equal(block1.serializeBinary());
    }

  });

  it('reparse1', async function () {
    let txRaw = BitUtil.base16ToBytes("1208494e49545f4449441a336569703135353a313a30783335423834643638343844313634313531373763363444363435303436363362393938413661623422336569703135353a313a30783335423834643638343844313634313531373763363444363435303436363362393938413661623422346569703135353a39373a3078443836333443333942424664343033336330643332383943343531353237353130323432333638312a670a0f6469643a6578616d706c653a313233120e6d61737465725f7075625f6b6579220f646572697665645f7075625f6b657932330a177075736831303232326e333233326d7764656963656a331218737472696e6769666965645f656e637279707465645f706b321071d60eecc00f4cc8ac898784a7eeb98f3ab40b7b226e6f646573223a5b7b226e6f64654964223a22307838653132644531324333356541426633356235366230344535334334453436386534363732374538222c2274734d696c6c6973223a313732363134383637303032342c2272616e646f6d486578223a2262323637636131656661626366386264323063623763616336356330633534323865656664663338222c2270696e67526573756c7473223a5b7b226e6f64654964223a22307866444145616637616643466262346534643136444336366244323033396664363030344346636538222c2274734d696c6c6973223a313732363134383637303032302c22737461747573223a317d2c7b226e6f64654964223a22307839384639443931304165663942334239413435313337616631434137363735654439306135333535222c2274734d696c6c6973223a313732363134383637303031362c22737461747573223a317d5d2c227369676e6174757265223a22307834366331643237316663383637343435393138356132616265636637373736323961303133373066343366303766343965623431363235616565656631643033356431396664326164326437323232373162343166336536636231653735303338343730366162383336363437363837653539346362636462636632316165663162227d2c7b226e6f64654964223a22307839384639443931304165663942334239413435313337616631434137363735654439306135333535222c2274734d696c6c6973223a313732363134383637303032392c2272616e646f6d486578223a2263316662333961383232623964383261643264373437333230626165383634303634386632356137222c2270696e67526573756c7473223a5b7b226e6f64654964223a22307838653132644531324333356541426633356235366230344535334334453436386534363732374538222c2274734d696c6c6973223a313732363134383637303031372c22737461747573223a317d2c7b226e6f64654964223a22307866444145616637616643466262346534643136444336366244323033396664363030344346636538222c2274734d696c6c6973223a313732363134383637303032342c22737461747573223a317d5d2c227369676e6174757265223a22307866663737366563393736306235646134373238323130333862646631646363656162333130666531323030376262336634336636346236343535303264663466333733323234333066653333366535313661356336613734363038353465343033306235363334343633646338613064613135386131623063373861323630653162227d2c7b226e6f64654964223a22307866444145616637616643466262346534643136444336366244323033396664363030344346636538222c2274734d696c6c6973223a313732363134383637303033352c2272616e646f6d486578223a2262393331656334316233393763623164656234396536353764396437623739383764316361373530222c2270696e67526573756c7473223a5b7b226e6f64654964223a22307838653132644531324333356541426633356235366230344535334334453436386534363732374538222c2274734d696c6c6973223a313732363134383637303031352c22737461747573223a317d2c7b226e6f64654964223a22307839384639443931304165663942334239413435313337616631434137363735654439306135333535222c2274734d696c6c6973223a313732363134383637303032352c22737461747573223a317d5d2c227369676e6174757265223a22307837633964343832396336616161363535396465643833323433623665386438623665623333366439303932613261306466323533316463336364396532623335353735626462386261313134323263326663346262363737653064396365356266343464353466653538373266396530373661633339643530316237343934333163227d5d7d42412592af30c62ac73025e37826d60a250e7c4f44c3697d2868307255bcff52a4b61e9a3fa015761ebd89b3d9d1ce3e4a7ad4691c5259e56f8be2e79a486a1eb01b1b4a0130")
    const tx = BlockUtil.parseTransaction(txRaw);
    let txRaw2 = tx.serializeBinary();

    console.log('txRaw: %s', BitUtil.bytesToBase16(txRaw));
    console.log('txRaw2: %s', BitUtil.bytesToBase16(txRaw2));
    console.log('equals: ', BitUtil.bytesToBase16(txRaw) === BitUtil.bytesToBase16(txRaw2));
    console.log('processing tx: %o', tx.toObject());
    console.log('tx hash raw %s', BlockUtil.hashTransactionAsHex(txRaw));

    console.log('tx hash after reparse %s', BlockUtil.hashTransactionAsHex(txRaw2));
    console.log('reparsed tx: %o', Transaction.deserializeBinary(txRaw).toObject());
  });


  it('sample transaction 1', async function () {
    const data = new InitDid();
    data.setMasterpubkey('0xBB');
    data.setDerivedkeyindex(1);
    data.setDerivedpubkey('0xCC');

    let et = new EncryptedText();
    et.setSalt('qaz');
    et.setNonce('');
    et.setVersion('push:v5');
    et.setPrekey('');
    et.setCiphertext('qwe');
    let wa = new WalletToEncDerivedKey();
    wa.setEncderivedprivkey(et);
    wa.setSignature(BitUtil.base16ToBytes("112233"));
    data.getWallettoencderivedkeyMap().set('0xAA', wa);

    const t = new Transaction();
    t.setType(0);
    t.setCategory('INIT_DID');
    t.setSender('eip155:1:0x35B84d6848D16415177c64D64504663b998A6ab4');
    t.setRecipientsList(['eip155:1:0x35B84d6848D16415177c64D64504663b998A6ab4', 'eip155:97:0xD8634C39BBFd4033c0d3289C4515275102423681']);
    t.setData(data.serializeBinary())
    t.setSalt(BitUtil.base64ToBytes('cdYO7MAPTMisiYeEp+65jw=='));
    t.setApitoken(BitUtil.base64ToBytes('eyJub2RlcyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMjQsInJhbmRvbUhleCI6ImIyNjdjYTFlZmFiY2Y4YmQyMGNiN2NhYzY1YzBjNTQyOGVlZmRmMzgiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMjAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNjE0ODY3MDAxNiwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4NDZjMWQyNzFmYzg2NzQ0NTkxODVhMmFiZWNmNzc3NjI5YTAxMzcwZjQzZjA3ZjQ5ZWI0MTYyNWFlZWVmMWQwMzVkMTlmZDJhZDJkNzIyMjcxYjQxZjNlNmNiMWU3NTAzODQ3MDZhYjgzNjY0NzY4N2U1OTRjYmNkYmNmMjFhZWYxYiJ9LHsibm9kZUlkIjoiMHg5OEY5RDkxMEFlZjlCM0I5QTQ1MTM3YWYxQ0E3Njc1ZUQ5MGE1MzU1IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMjksInJhbmRvbUhleCI6ImMxZmIzOWE4MjJiOWQ4MmFkMmQ3NDczMjBiYWU4NjQwNjQ4ZjI1YTciLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMTcsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweGZEQUVhZjdhZkNGYmI0ZTRkMTZEQzY2YkQyMDM5ZmQ2MDA0Q0ZjZTgiLCJ0c01pbGxpcyI6MTcyNjE0ODY3MDAyNCwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4ZmY3NzZlYzk3NjBiNWRhNDcyODIxMDM4YmRmMWRjY2VhYjMxMGZlMTIwMDdiYjNmNDNmNjRiNjQ1NTAyZGY0ZjM3MzIyNDMwZmUzMzZlNTE2YTVjNmE3NDYwODU0ZTQwMzBiNTYzNDQ2M2RjOGEwZGExNThhMWIwYzc4YTI2MGUxYiJ9LHsibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMzUsInJhbmRvbUhleCI6ImI5MzFlYzQxYjM5N2NiMWRlYjQ5ZTY1N2Q5ZDdiNzk4N2QxY2E3NTAiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjYxNDg2NzAwMTUsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNjE0ODY3MDAyNSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4N2M5ZDQ4MjljNmFhYTY1NTlkZWQ4MzI0M2I2ZThkOGI2ZWIzMzZkOTA5MmEyYTBkZjI1MzFkYzNjZDllMmIzNTU3NWJkYjhiYTExNDIyYzJmYzRiYjY3N2UwZDljZTViZjQ0ZDU0ZmU1ODcyZjllMDc2YWMzOWQ1MDFiNzQ5NDMxYyJ9XX0=')); // fake token
    t.setFee("0"); // tbd
    // todo fake signature ; grab real eth wallet here
    t.setSignature(BitUtil.base64ToBytes('JZKvMMYqxzAl43gm1golDnxPRMNpfShoMHJVvP9SpLYemj+gFXYevYmz2dHOPkp61GkcUlnlb4vi55pIah6wGxs='));
    let tBlob = t.serializeBinary();

    console.log("\n\n\ntx as base16", BitUtil.bytesToBase16(tBlob));
    console.log("\n\n\ntx as json", JSON.stringify(t.toObject()));
    let parsedT = Transaction.deserializeBinary(tBlob);
    console.log("\n\n\ntx as json (re-parsed)", JSON.stringify(parsedT.toObject()));
    console.log("\n\n\ntx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(tBlob)));

  })

  it('check 2 types of bytes in tx', async function () {
    const t = new Transaction();
    t.setType(0);
    t.setCategory('INIT_DID');
    t.setSender('eip155:1:0xAA');
    t.setRecipientsList(['eip155:1:0xBB', 'eip155:1:0xCC']);
    t.setData(new Uint8Array());
    t.setSalt(IdUtil.getUuidV4AsBytes()); // uuid.parse(uuid.v4())

    t.setFee("1"); // tbd
    t.setSignature(BitUtil.base16ToBytes("EE")); // fake signature
    console.log("-".repeat(40));
    console.log("tx as json", JSON.stringify(t.toObject()));


    let token = "eyJub2RlcyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMzAsInJhbmRvbUhleCI6ImY3YmY3YmYwM2ZlYTBhNzI1MTU2OWUwNWRlNjU2ODJkYjU1OTU1N2UiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNDY3MzI0MDAxOSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4YjMzM2NjMWI3MWM0NGM0MDhkOTZiN2JmYjYzODU0OTNjZjE2N2NiMmJkMjU1MjdkNzg2ZDM4ZjdiOTgwZWFkMzAxMmY3NmNhNzhlM2FiMWEzN2U2YTFjY2ZkMjBiNjkzZGVmZDAwOWM4NzExY2ZjODlmMDUyYjM5MzY4ZjFjZTgxYiJ9LHsibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjUsInJhbmRvbUhleCI6IjkyMTY4NzRkZjBlMTQ4NTk3ZjlkNDRkMGRmZmFlZGU5NTg0NGRkMTciLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyMjQ2NTAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNDY3MzIyNDY1NSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4N2JmYzQ0MjQ0ZGM0MTdhMjg0YzEwODUwZGEzNTE2YzUwNWEwNjJmYjIyYmI1ODU0ODg2YWEyOTk3OWUwMmYxOTdlZWMyYzk2ZDVkOTQ4ZDBhMWQ2NTBlYzIzNGRhMDVjMGY5M2JlNWUyMDkxNjFlYzJjY2JjMWU5YzllNzQyOGIxYiJ9LHsibm9kZUlkIjoiMHg5OEY5RDkxMEFlZjlCM0I5QTQ1MTM3YWYxQ0E3Njc1ZUQ5MGE1MzU1IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjQsInJhbmRvbUhleCI6IjBkOWExNmE4OTljYWQwZWZjODgzZjM0NWQwZjgwYjdmYTE1YTY1NmYiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyMjY5NDMsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweGZEQUVhZjdhZkNGYmI0ZTRkMTZEQzY2YkQyMDM5ZmQ2MDA0Q0ZjZTgiLCJ0c01pbGxpcyI6MTcyNDY3MzIyNjk0Nywic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4YmE2Mjk2OTZlZWU4MDQ4ZDE2OTA3MDNhZmVjYWY4ZmJjM2Y4NDMxOWQ0OTFhZGIzY2YzZGYzMzExMTllMDAyOTA1MTc3MjAyNzkxNzEzNTMzMmU0MGZiMzI2OTM5Y2JhN2Y2NDc2NmYyYjY5MzQwZTZlNGYwZmIzNjM2OThmYzkxYiJ9XX0=";
    t.setApitoken(token);

    // A have a sting in base64, you want to set(Uint8Array)

    let txAsBytes = t.serializeBinary();
    console.log("tx as base16", BitUtil.bytesToBase16(txAsBytes));
    console.log("tx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(txAsBytes)));

    t.setApitoken(BitUtil.base64ToBytes(token));
    let txAsBytes2 = t.serializeBinary();
    console.log("tx as base16", BitUtil.bytesToBase16(txAsBytes2));
    console.log("tx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(txAsBytes2)));

  })


  it('create transaction and block, serialize/deserialize', async function () {
    console.log("building ------------------------- ");
    // build transaction data (app-dependent)
    const data = new InitDid();
    data.setMasterpubkey('0xBB');
    data.setDerivedkeyindex(1);
    data.setDerivedpubkey('0xCC');
    console.log("data as json", JSON.stringify(data.toObject()));

    // build transaction
    const t = new Transaction();
    t.setType(0);
    t.setCategory('INIT_DID');
    t.setSender('eip155:1:0xAA');
    t.setRecipientsList(['eip155:1:0xBB', 'eip155:1:0xCC']);
    t.setData(data.serializeBinary())
    t.setSalt(IdUtil.getUuidV4AsBytes()); // uuid.parse(uuid.v4())
    let token = "eyJub2RlcyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMzAsInJhbmRvbUhleCI6ImY3YmY3YmYwM2ZlYTBhNzI1MTU2OWUwNWRlNjU2ODJkYjU1OTU1N2UiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNDY3MzI0MDAxOSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4YjMzM2NjMWI3MWM0NGM0MDhkOTZiN2JmYjYzODU0OTNjZjE2N2NiMmJkMjU1MjdkNzg2ZDM4ZjdiOTgwZWFkMzAxMmY3NmNhNzhlM2FiMWEzN2U2YTFjY2ZkMjBiNjkzZGVmZDAwOWM4NzExY2ZjODlmMDUyYjM5MzY4ZjFjZTgxYiJ9LHsibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjUsInJhbmRvbUhleCI6IjkyMTY4NzRkZjBlMTQ4NTk3ZjlkNDRkMGRmZmFlZGU5NTg0NGRkMTciLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyMjQ2NTAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNDY3MzIyNDY1NSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4N2JmYzQ0MjQ0ZGM0MTdhMjg0YzEwODUwZGEzNTE2YzUwNWEwNjJmYjIyYmI1ODU0ODg2YWEyOTk3OWUwMmYxOTdlZWMyYzk2ZDVkOTQ4ZDBhMWQ2NTBlYzIzNGRhMDVjMGY5M2JlNWUyMDkxNjFlYzJjY2JjMWU5YzllNzQyOGIxYiJ9LHsibm9kZUlkIjoiMHg5OEY5RDkxMEFlZjlCM0I5QTQ1MTM3YWYxQ0E3Njc1ZUQ5MGE1MzU1IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjQsInJhbmRvbUhleCI6IjBkOWExNmE4OTljYWQwZWZjODgzZjM0NWQwZjgwYjdmYTE1YTY1NmYiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyMjY5NDMsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweGZEQUVhZjdhZkNGYmI0ZTRkMTZEQzY2YkQyMDM5ZmQ2MDA0Q0ZjZTgiLCJ0c01pbGxpcyI6MTcyNDY3MzIyNjk0Nywic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4YmE2Mjk2OTZlZWU4MDQ4ZDE2OTA3MDNhZmVjYWY4ZmJjM2Y4NDMxOWQ0OTFhZGIzY2YzZGYzMzExMTllMDAyOTA1MTc3MjAyNzkxNzEzNTMzMmU0MGZiMzI2OTM5Y2JhN2Y2NDc2NmYyYjY5MzQwZTZlNGYwZmIzNjM2OThmYzkxYiJ9XX0=";
    t.setApitoken(BitUtil.base64ToBytes(token)); // fake token


    // A have a sting in base64, you want to set(Uint8Array)

    t.setFee("1"); // tbd
    t.setSignature(BitUtil.base16ToBytes("EE")); // fake signature
    console.log("-".repeat(40));
    console.log("tx as json", JSON.stringify(t.toObject()));

    const txAsBytes = t.serializeBinary();
    console.log("tx as base16", BitUtil.bytesToBase16(txAsBytes));
    console.log("tx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(txAsBytes)));
    // build block

    // transactions
    const to = new TransactionObj();
    to.setTx(t);
    const vd = new TxValidatorData();
    vd.setVote(1);
    const ad = new TxAttestorData();
    ad.setVote(1);
    to.setValidatordata(vd);
    to.setAttestordataList([ad]);

    // signers
    const s1 = new Signer();
    s1.setSig(BitUtil.base16ToBytes('CC'));
    const s2 = new Signer();
    s2.setSig(BitUtil.base16ToBytes('EE'));

    const b = new Block();
    b.setTs(DateUtil.currentTimeSeconds());
    b.setTxobjList([to]);
    b.setAttesttoken('DD'); // fake attest token
    b.setSignersList([s1, s2]);
    b.setAttesttoken(BitUtil.base16ToBytes("C1CC"));
    console.log("block as json", JSON.stringify(b.toObject()));

    const blockAsBytes = b.serializeBinary();
    console.log("block as base16", BitUtil.bytesToBase16(blockAsBytes));
    console.log("block hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(blockAsBytes)));


    // PARSE it back into objects
    console.log("parsing ------------------------- ");
    let t2 = Transaction.deserializeBinary(txAsBytes);
    console.log("tx2 as json", JSON.stringify(t2.toObject()));

    let b2 = Block.deserializeBinary(blockAsBytes);
    console.log("block2 as json", JSON.stringify(b2.toObject()));
  });

  it('test for setting data as string (do not use this)', async function () {
    const t = new Transaction();
    let originalData = "AABB";
    console.log('assign data ', originalData);
    let encoded = BitUtil.bytesToBase64(BitUtil.base16ToBytes("AABB"));
    console.log('encoded for assignment ', encoded);
    t.setData(encoded);
    console.log("t as bin", BitUtil.bytesToBase16(t.serializeBinary()));
    let protoEncodedAndDecoded: any = Transaction.deserializeBinary(t.serializeBinary()).getData();
    console.log('expeced assigned data, to be ', originalData, "but got", protoEncodedAndDecoded, '=', BitUtil.bytesToBase16(protoEncodedAndDecoded));
  });

})


// for printing the wallet info
async function loadWalletInfos(): Promise<WalletInfo[]> {
  const walletFiles = [
    { name: 'v1', filePath: 'docker/v1/validator_eth_key.json', password: 'test' },
    { name: 'v2', filePath: 'docker/v2/validator_eth_key.json', password: 'test' },
    { name: 'v3', filePath: 'docker/v3/validator_eth_key.json', password: 'test' },
  ];

  const walletInfos: WalletInfo[] = await Promise.all(
    walletFiles.map(async ({ filePath, password }) => {
      const json = fs.readFileSync(filePath, 'utf8');
      const wallet = await Wallet.fromEncryptedJson(json, password);
      return {
        address: wallet.address,
        publicKey: wallet.publicKey,
        privateKey: wallet.privateKey,
      };
    })
  );
  return walletInfos;
}