// noinspection DuplicatedCode

import 'mocha'
import {assert, expect} from 'chai'
import {
  Block, EncryptedText,
  InitDid,
  Signer,
  Transaction,
  TransactionObj,
  TxAttestorData,
  TxValidatorData, WalletToEncDerivedKey
} from "../../src/generated/push/block_pb";
import IdUtil from "../../src/utilz/idUtil";
import {BitUtil} from "../../src/utilz/bitUtil";
import {HashUtil} from "../../src/utilz/hashUtil";
import {DateUtil} from "../../src/utilz/dateUtil";
import {BlockUtil} from "../../src/services/messaging-common/blockUtil";
import {ethers, Wallet} from "ethers";
import fs from "fs";
import {StrUtil} from "../../src/utilz/strUtil";
import {NetworkRandom, NodeRandom, ValidatorRandom} from "../../src/services/messaging/validatorRandom";
import {ChainUtil} from "../../src/utilz/chainUtil";
import {SolUtil} from "../../src/utilz/solUtil";
import {StarkNetUtil} from "../../src/utilz/starkNetUtil";
import {PushSdkUtil} from "../../src/services/messaging-common/pushSdkUtil";


type WalletInfo = {
  address: string;
  publicKey: string;
  privateKey: string;
};


// test nodes private keys
// DO NOT USE THEM ANYWHERE
let NODE_KEYS: WalletInfo[] = [
  {
    address: '0x8e12dE12C35eABf35b56b04E53C4E468e46727E8',
    publicKey: '0x044c6cc0547e97253814528c616fbb3aa6ebd4a306cf43521a8f9a2ee187d1c3a70adba740eb5592c68f408cf848eb9621985e5c269ec37ad27845a542ae8c6afd',
    privateKey: '0x33fb23f822c5dba0f3cb2796b90d56bb553ebd215726398c93374440b34e510b'
  },
  {
    address: '0xfDAEaf7afCFbb4e4d16DC66bD2039fd6004CFce8',
    publicKey: '0x04f4c9461d8babf5962f48e3ed1f94748247d330eca80dba31986055b6c05c97d13a4f99c4cf3e304ab803f99042978a386ed08f56d68dda59948ea8a70918f157',
    privateKey: '0x16c90855a0dfc9884adf2625a4bffcdbfe760d5ff6756a766d2bbc0bc82318f0'
  },
  {
    address: '0x98F9D910Aef9B3B9A45137af1CA7675eD90a5355',
    publicKey: '0x043b668e94ed022dc14a48a730421b5e6b83fccea79de60d7eb2627743020431be0a6746a885327d5fccd10ccc046659f58e880c4b8009a4e028a42497d1ccd157',
    privateKey: '0xb6c538bac86eb0964b16b7ff6a1ac7d5f0736dcbd0f00bd142ae433dad27f685'
  }
];

// test eth user private keys from hardhat (these are publicly known)
let USER_KEYS: WalletInfo[] = [
  {
    address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
    publicKey: null,
    privateKey: '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80'
  },
  {
    address: '0x70997970C51812dc3A010C7d01b50e0d17dc79C8',
    publicKey: null,
    privateKey: '0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d'
  },
  {
    address: '0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC',
    publicKey: null,
    privateKey: '0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a'
  }
]

let VALID_VNODES = new Set<string>(NODE_KEYS.map((wallet) => wallet.address));
let API_TOKEN_LOCAL = 'VT1eyJub2RlcyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyODAwMjMsInJhbmRvbUhleCI6ImFjM2YzNjg5ZGIyMDllYjhmNDViZWEzNDU5MjRkN2ZlYTZjMTlhNmMiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyNTAwMjEsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyODY3MTI1MDAyMSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4MTA0ZmIwNTEzNTJiYTcxYjM4Zjk5M2ZhNDZiY2U2NGM2ZDMyYzBhZDRlZWYxZTgxODVjZjViMDRmYmVjOGM4YTRmMDhmYzg3MzBjZGI4NDcyMmZkYTIxMDU3MzRkOWU5MGNjMzlmZGE0ZjVkMTYxZjljOWFiNGEyMzIxM2RlZGExYyJ9LHsibm9kZUlkIjoiMHg5OEY5RDkxMEFlZjlCM0I5QTQ1MTM3YWYxQ0E3Njc1ZUQ5MGE1MzU1IiwidHNNaWxsaXMiOjE3Mjg2NzEyODAwMjAsInJhbmRvbUhleCI6Ijk5NTAyYmM4MWQyNWE2NjdlODlmYTZkNmY3ZDBjZmUxNzdmODkyZjMiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyNTAwMjIsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweGZEQUVhZjdhZkNGYmI0ZTRkMTZEQzY2YkQyMDM5ZmQ2MDA0Q0ZjZTgiLCJ0c01pbGxpcyI6MTcyODY3MTI1MDAyMSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4MmRiNjY4MTI5NGY0NGVhMzVmYWUxZGRhODhhMTIyZjk1NTBlNjg4MzIwZGY1MzU1MDJmNjQ1N2U2YmYyNmEwYzIzOGVjNDlkNTFhNGM3MTlmODhhYzEzMWFmOGIyZTcxOTdhOWY4MGQzMDAyYThkOTQ4YzM5YTU4NDgzNTYwYzQxYiJ9LHsibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyODAwMjQsInJhbmRvbUhleCI6IjYzYWIxYWU4ZDk0MDNkY2I1NzM4NGZiNzE0NDQyYmIyMmI0NjYxN2UiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyNTAwMjIsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyODY3MTI1MDAyMiwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4M2Q3ZDAxMzdiNGE0MWNlNDczZTljZjBkNDkzZWE4OTM0YWFhZWIxYThiZGFlNzFlMWYyNTM1MDYxZDc2MjAxMTIyMDY5ZTYzOGU3ZTBkMmNiY2U1MmFiN2I3YzZlMTkwYzJlNWEzM2U1YTVkZjg0ZTJmY2ViZjllZDgwODlkMjgxYyJ9XX0=';


function getNodeWallet(index: number): Wallet {
  return new Wallet(NODE_KEYS[index].privateKey);
}

function getUserWallet(index: number): Wallet {
  return new Wallet(USER_KEYS[index].privateKey);
}

let masterKeyIndex = 2;

function printObj(msg: string, obj: any) {
  console.log(msg);
  console.log('%s\n%o', StrUtil.fmtProtoBytes(obj), obj.toObject());
}

function getMasterKey() {
  return getUserWallet(2);
}

async function buildInitDidTx() {
  let wallet = getMasterKey();
  const pushAddr = PushSdkUtil.evmAddrToPushAddr(wallet.address);
  const pushAddrCaip = 'push:1:' + pushAddr;

  const data = new InitDid();
  const masterPublicKey = getMasterKey().publicKey;
  data.setMasterpubkey(masterPublicKey);
  data.setDerivedkeyindex(1);
  data.setDerivedpubkey('0xCC');

  /*let et = new EncryptedText();
  et.setSalt('qaz');
  et.setNonce('');
  et.setVersion('push:v5');
  et.setPrekey('');
  et.setCiphertext('qwe');
  let wa = new WalletToEncDerivedKey();
  wa.setEncderivedprivkey(et);
  wa.setSignature(BitUtil.base16ToBytes("112233")); // todo put a real signature here



  data.getWallettoencderivedkeyMap().set(pushAddrCaip, wa);*/

  const t = new Transaction();
  t.setType(0);
  t.setCategory('INIT_DID');
  t.setRecipientsList(
    ['eip155:1:' + getUserWallet(1).address,
      'eip155:1:' + getUserWallet(2).address]);
  t.setData(data.serializeBinary())
  t.setSalt(BitUtil.base64ToBytes('cdYO7MAPTMisiYeEp+65jw=='));
  t.setApitoken(BitUtil.stringToBytesUtf(API_TOKEN_LOCAL)); // fake token
  t.setFee("0"); // tbd


  t.setSender(pushAddrCaip); // some push chain address generated;
  await BlockUtil.signInitDid(t, wallet);
  return t;
}

async function buildCustomTx1() {
  const data = BitUtil.base16ToBytes("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");

  const t = new Transaction();
  t.setType(0);
  t.setCategory('CUSTOM:EMAIL');
  t.setSender('eip155:1:' + getUserWallet(0).address);
  t.setRecipientsList(
    ['eip155:1:' + getUserWallet(1).address,
      'eip155:1:' + getUserWallet(2).address]);
  t.setData(data);
  t.setSalt(BitUtil.base64ToBytes('cdYO7MAPTMisiYeEp+65jw=='));
  t.setApitoken(BitUtil.stringToBytesUtf(API_TOKEN_LOCAL)); // fake token
  t.setFee("0");
  await BlockUtil.signTxEVM(t, getUserWallet(0));
  return t;
}

async function buildCustomTxRandom() {
  const data = BitUtil.base16ToBytes(DateUtil.currentTimeMillis().toString(16));
  console.log(BitUtil.bytesToBase64(data));
  const t = new Transaction();
  t.setType(0);
  t.setCategory('CUSTOM:EMAIL');
  t.setSender('eip155:1:' + getUserWallet(0).address);
  t.setRecipientsList(
    ['eip155:1:' + getUserWallet(1).address,
      'eip155:1:' + getUserWallet(2).address]);
  t.setData(data)
  t.setSalt(IdUtil.getUuidV4AsBytes());
  t.setApitoken(BitUtil.stringToBytesUtf(API_TOKEN_LOCAL)); // fake token
  t.setFee("0");
  await BlockUtil.signTxEVM(t, getUserWallet(0));
  return t;
}


describe('sample data', async function () {

  it('check some random block from UI - showing node signer addresses', async function () {
    let hex = '08819dbff7ab32229f0f41543165794a756232526c6379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b334f4441794d7a41784d7a4173496e4a68626d52766255686c65434936496a6b795a545179596d5a6c5a446b784e6a4a6a596a55785a6d5a6d5a6a5a6c4d32566d4e444a6d4d445533593259344d4749784d6a51694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b334f4441794d7a41774f545973496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5463344d44497a4d4441344e537769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42345a5759354e32466b4e7a566a5a5463315a6a526a5a6a4a695a6a51795a575a6c4f474d785a6d4e6c5954597a4e5451325a5455314f546778596a4e6c4d6d49354e6d4534596a55304f546b7a5a5751774e3251355a444d774f444d314f474d314e7a59785a6d4e6c4d44426d4f5449345a6d5a69597a6b324f5455344d6d4579596d5a6c596d4531595755784e5759345a5755784d47457a4e7a4e6c4f5463354e5749324e7a5133597a457859694a394c487369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b334f4441794d7a41774e7a4d73496e4a68626d52766255686c65434936496a56694e5745344e574d314d7a497a5a6a4e684d54466a4d6a56694d4751354e7a566d5a6a646b4d6a6b354e54466d4e44637a4e6d45694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b334f4441794d4441784e446773496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5463344d4449774d4441324e797769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344e5745784e7a4e6d4e6a426b4d444e6d595759325a4467334e6a51774f4451334f544e6b5a6a4a694f5445344e6a5268595441344d5745775957466b4f5468694d6a4d324e44526c4d5442694e47566c4e32466a4d6a457a5a4751305a5451314e6d59304e544a6b5932566859575533597a41784d47566b5a4749314f5745795a54517a4f4759794d6a4d335a546c6b4e6a497a4d44497759546c6b5a57566b4d44517a4d4463305a6a417859794a394c487369626d396b5a556c6b496a6f694d4867354f45593552446b784d45466c5a6a6c434d304935515451314d544d3359575978513045334e6a63315a5551354d4745314d7a55314969776964484e4e6157787361584d694f6a45334d6a6b334f4441794d7a41784d7a5573496e4a68626d52766255686c65434936496a426b5a474e694d6a677a4d7a42685a44526a4e575a6c4d5449795a5749784e4464684f4756684e7a49344d445132596a52694f546b694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b334f4441794d7a41784d6a4d73496e4e3059585231637949364d58307365794a756232526c535751694f69497765475a45515556685a6a64685a6b4e47596d49305a54526b4d545a45517a5932596b51794d444d355a6d51324d44413051305a6a5a5467694c434a306330317062477870637949364d5463794f5463344d44497a4d4441334d537769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a423459544d30597a67355a5755784e444e684f4467795a6a55324d4752694d7a557a4d475a694e3249785a546c6c4d6a5a6d4e5449355a4759334e7a63325954526b4e5745355a6a51784e324d795a5759324e6d45344d54646d4e47526a4e444d77596d55795a6d517a4e7a59304d54566a593259334f444a6c5a6d4a684f575a6a597a466a4d5449314d6a5931595441344d4455795a445a6d4f5445314e7a5268596d55344d6a63794e54557859794a395858303d12fb110aec111210435553544f4d3a505553485f4d41494c1a54736f6c616e613a3565796b7434557346763850384e4a64545245705931767a714b715a4b7664703a36394555594a4b72324e453876484670687952505355327471526258684d7539677a4e6f39366d6a76464c7622336569703135353a313a3078333542383464363834384431363431353137376336344436343530343636336239393841366162342a540a18496e7669746174696f6e20746f2050757368204576656e7412260a2448657920757365722c2055207220696e766974656420746f2050757368206576656e742e22100a085072696f7269747912044869676832103a341811883440a78bef2000f53a51c13a9f0f56543165794a756232526c6379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b334f4441794d7a41784d444173496e4a68626d52766255686c65434936496a6c6d596d526b4d324d354d54526c596d4a6c593252694e6a63304d6a51335a5449324e546b334d4749795a5467355a5755325a5467694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b334f4441794d4441784e446773496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5463344d4449774d4441324e797769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a4234596a4e6d596a67354d6a466859575a6c4d7a5930596a6b32597a5135593256695a5755785a57457a4d5759345a6a49345a6d466a596d51325a445a695a44566d4f575a6d595755345a6a526a4e47526c4e3255794e7a5a6a5a4467335a54426859574e69597a55795a6a4d32595759794d6a63314e7a46684e544130596a686a4f444d784d4749784d324e6a4e5441334e544d344e7a63795a5759354e47593159545179595445784f44597859694a394c487369626d396b5a556c6b496a6f694d4867354f45593552446b784d45466c5a6a6c434d304935515451314d544d3359575978513045334e6a63315a5551354d4745314d7a55314969776964484e4e6157787361584d694f6a45334d6a6b334f4441794d7a41774f545573496e4a68626d52766255686c65434936496a67344e325669597a466a4d6d557a4d4749354f5745304f5745344e6a46694f446868595442684e5449774e4759314f4451314d4745694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b334f4441794d4441784e544973496e4e3059585231637949364d58307365794a756232526c535751694f69497765475a45515556685a6a64685a6b4e47596d49305a54526b4d545a45517a5932596b51794d444d355a6d51324d44413051305a6a5a5467694c434a306330317062477870637949364d5463794f5463344d4449774d4441334e437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344e5759794e32466d4f54466859574d774f44566d4d54686b4d444e6b4e6d51334f544a6a4d44466c4d6d51355a4451354d7a566d4d5455334e6a686c4d5751324e6a41334d47526b4d7a56694e7a6c694f446c685954466a5a544a6a4e325979597a55344d3252685a6a51304e4467784d7a686a4e6d5a684d7a6735597a426d59324d7a5a4749795a6a5668596d46694e4467324e7a6c69596a64695a4456694d7a4e684e44526d596d597859694a394c487369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b334f4441794d7a41784d545573496e4a68626d52766255686c65434936496a6b354d7a517a4e446b354f5759315a6d4a694e6a4d314f4467784f54526a5a6a4930597a51334e446b355a6d526c5a474d304d7a51694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b334f4441794d7a41774f545973496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5463344d44497a4d4441344e537769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344d7a49794e444d784f44566a4d4452684e6a67785a5459795a6a55775a6d59304e44466c597a646b4d546b794f5451324e6d4533597a45794d7a45795a544d7a5a4441794d6a4d304d32526c597a52694d546b774d6a4e6b595756684e7a63784d5467354e574d774f54566b4f544d314d3251314f446b79596a6b325a47497a4f5459345a6a51354d324d795a544a6c597a686c4e7a466d5a4755354d7a45774d5749304e44677a4f54637859694a395858303d4240136d068c27d0b80374e56c5ae736f96f743e4dbdec1544f77eadd4f0c799de8d165a92fdcf0b2d72244371546aac4bbaafcd77125b281e6ba0ed0365f7f3390e4a0130120208011a0208011a0208011a430a41dd7f0058b49b98b9fcb94e34e5378c03f39f503137432cf404e71f9dde34f73602de23f09f1d376b195af870b30a5f229999201805b9e2575168baf21a5cbd961c1a430a41e4894b488bae88b1ab96b5450e6a2a94e9de33616666deb5374e2a20253d0d0174da0b92772b9d4bd611abbd1766bdf1023ff2581cae339c5d1141da512bc6241b1a430a41d033b8522f03da0a54d6f7f29590dda76564e10d02ab56b778f0a146b447eabc24bae87c8f5aaeb42df514fadac0232b780126baf0cf07ffde461aa7c4887a191b';
    // let hex = '08a1a294a4ac32229f0f41543165794a756232526c6379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b344e7a4d344f5441774f444d73496e4a68626d52766255686c65434936496a6c6a4f544a6c4e324668596a6b334e5463774d474d334e4749344f474d314e44553159545931596d59335a6d45355a5442695a6a63694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b344e7a4d344e6a41774e7a4573496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5467334d7a67324d4441344d437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344d4451324d4467354f5463785954566c4e7a59354e57557959544d334f474d794e574577596d56685a54497a4e32597a4f5467354d6a55354e7a51345a575a6b4d7a6b334e47466d59544e6a4d5459325a6a6c6d4f54557a4d5467324f544a69596d51354e54646b4e575a695a6a5134593249304f54557a5a44466c4e7a41334e7a6b7a596a637a4d6d4d324e6a686b5a4756684d574e6b4d7a67334f5445344e7a63314d6d4e6b4d574d7859694a394c487369626d396b5a556c6b496a6f694d4867354f45593552446b784d45466c5a6a6c434d304935515451314d544d3359575978513045334e6a63315a5551354d4745314d7a55314969776964484e4e6157787361584d694f6a45334d6a6b344e7a4d344f5441774e7a6773496e4a68626d52766255686c65434936496d51304e54426a59575a6d4d54566b5a4463774e7a63334d7a49794e5449315a6a4d334e7a457a5957517a4f4759325a6a5932595755694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b344e7a4d344e6a41784d6a4573496e4e3059585231637949364d58307365794a756232526c535751694f69497765475a45515556685a6a64685a6b4e47596d49305a54526b4d545a45517a5932596b51794d444d355a6d51324d44413051305a6a5a5467694c434a306330317062477870637949364d5463794f5467334d7a67324d4441344f537769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344e4463794d474e694f54517a595463354d5445344d475932595745335a445179596a49334e324d78597a59784d5459334d3249345932566a5a6d51325a544d3459546c6d4f5455324e6a457a4d575a694d7a63314d7a55794d4755314e7a4d795a54677a4e6a646b595441334e545a695a574d344e54517a4d47457a595451354e5445335a575a6d4e32566c4e4441315a475a6b4e47566d4d6a6b304d5755344d6a426b4f474a6a5a6d497859694a394c487369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b344e7a4d344f5441784d544973496e4a68626d52766255686c65434936496d45335a57517a5a57466a5a6a49794e6d526a4d474d305a44426d4d575a694f5759334e6a4a684d6a426c4e544132597a55304f4467694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b344e7a4d344f5441774f545973496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5467334d7a67354d4441324e437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344e4752685a47466a59546b3259546777597a466d4d324e6d4e4455785a6a42694d6a6735597a51344f444e6a4f4451794e6d46694d4745354d446b784d32457a4e545a6c4f546b784e4755795a6a6b334e47466c4e5452684d7a49354e474e6a4f4749335a5745335a6a4d30597a4d785957597a4f446b355932453359544132597a41795a474d774d324a6a4f5445354e5467324d44526b5a544d314f4459345a6d4a69596d4e6a4d57597859794a395858303d12ba1a0aab1a1208494e49545f4449441a37707573683a6465766e65743a70757368316675716a366d39736e68767864636a7268637836686665793076776a6837796a6e377276647a2aeb090a423032376264653639353964616162343436373737366636353137306264363566656530646537383261633163356330623765323532343830326264646366326134321080808080081a4230333733653830663662313532316664343835366464613630363739636433646234303238633433313932316365303964393236663563616366353662363133393422aa040a37707573683a6465766e65743a70757368317a363476397837646b346e397765706779336d6b70367332337a63686437396d6e6737766e3712ee030aa8030afea186134663561356331326263666135616230643531336432322207707573683a76352a40353531363033363430313466656133386334303938633830323432383238613361316434376233343434656537613463343533366137616631356139626138611241a072a08715cfee5aace7c9983c04ca22cf1c2c45fac0e175598c534978561fcd0c4a2ee1a669b26018cceaadf47b0e11e849270b227b220ae08eab457cd629471c22ad040a3a6569703135353a31313135353131313a30786138466442653132646643396341464238323545383944324364363334636532633636364562423112ee030aa8030afe0164343863643837666562666263326464376337616637333532643932383836666632663537653665383132323264383061396137373233303561376538393334656333313331353561313337303639626665373734636335393265376661636432303134616161316534363936396137323862616639313635633661626438306563353337613436663233306663626566303565396431343538653936313265653565386661663665393764333735353838663831323464623538363437663338666262653139343431616537396635663632343461383834383939333335333230613430613661613533386531323137396366626666366431633231361240326661346664326439633332376331313230316537643030653766343935616330346563396137393366646233663832343335373236613633333662353265371a183563396661303434383332306430633938333833313431362207707573683a76352a406435653630623732313563626563393834616364306264316164363639363461643932393861613539623962393137633766613230333832666231353334373112414ae7d6529541f2ca453587610ac5addaa4289059e7dff44263ec6abb01893352120a651c49e44802b014650748dcdca8ac3999788e8581f40b226f14f09e7ecb1b32104d2e7661c9504e2ab68befd967d551583a9f0f56543165794a756232526c6379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b344e7a4d344f5441774f445573496e4a68626d52766255686c65434936496a67785a4745305a474a6a4f47517a4e5745345a545a69597a646b5a6a6c6b4e7a646d59546c6a596a4133597a526c4e5756694e446b694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b344e7a4d344e6a41774e7a4573496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5467334d7a67324d4445784e697769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a4234596a67324d574a684d575178596a646d4e4759314d54526a5a5459334d474a685a6a566c4e54566d4e47453159544d795a6d4d30597a426b4d6d4d355a6a5669596d4a6b4f44646d4d54646c596d566a4f544179597a553459324a6c593251355a5751344e4755794e6a4931596d4e695a6a4530597a4a6a5a6d4a6a5a4459354f475a6a4e6d51784d6a59774d44646b5a6a4d794d6d51345a574a6b596a6c6a5a6a566d4e544e684d44557859794a394c487369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b344e7a4d344f5441774e545173496e4a68626d52766255686c65434936496a41355a6a51774e3252694d6a49774e474a6c5a544e694d6a67354e3259784e4463784d7a64695a546c6c59544935597a64694e4463694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b344e7a4d344e6a41774e7a4573496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5467334d7a67324d4441344d437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344d4445795a574e684e54417a4f444e6c596a63774d5459305a6a4d774d7a63784e54466c4e7a6b324f44566b5a47526959546c6b4f4759324d4755334e7a646c59324a6a4d6d5a6c4d4759334e544d354d446b335a544a6d5a5455794d474a6a5a6a55304d4455794e54526a4e6a526b4e474e684f574530596a55344e7a55774d5456685a6a557a5a5446694d32466b4d446378596a41324d7a4a6a4f4751784d4751784d6a51335a54417859794a394c487369626d396b5a556c6b496a6f694d4867354f45593552446b784d45466c5a6a6c434d304935515451314d544d3359575978513045334e6a63315a5551354d4745314d7a55314969776964484e4e6157787361584d694f6a45334d6a6b344e7a4d344f5441784d445973496e4a68626d52766255686c65434936496a6b33596a6b795a57457a4e7a686b4d4455354f444d775a4455334e574e684e6d597a4e7a51785a54426c4d54497759575979596d49694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b344e7a4d344f5441774e7a5973496e4e3059585231637949364d58307365794a756232526c535751694f69497765475a45515556685a6a64685a6b4e47596d49305a54526b4d545a45517a5932596b51794d444d355a6d51324d44413051305a6a5a5467694c434a306330317062477870637949364d5463794f5467334d7a67354d4441324f437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344d5455314f47466859544d314d44426c597a59354f544977597a6c6c593245315a54466a596a4e694e474978595455325a6a6c6859546c694d6a4e694e6d59325a446c6c59324930596a41344e6d4a6a59545a6d4f5445354d6d49305a574d78597a5134597a426c4d6a42685a6a59344e7a64694e5751304d545935596d59794d6a59314e444a6d4d5463784d544a6b4e6a566a4d446b7a5a54566a596d4d33596a41314f444e6b4d574d7859694a395858303d4241157ecdc795635885344f887b9d4ab6c9ece51c061710e44db86cb8ba75830bdb54b999f99ef6db05129a593c50f36eedccb461ab2a908331cb06e60b806d95b91c4a0130120208011a0208011a0208011a430a416245fd91ab37378d023fd79a346ab4e189d5255ffc4008b0bb201f2f18d19bd31bdec70e0b7b5d7a2b93cc07cf6443d30a22ac8d6acdf24a0f4caef8b351329f1b1a430a41b91f668d6f6b010c1f2779956969868220d3794a1e69bc5db1ff938da2ab2fab1b39be154b13c5a50487099afb2074998403aa98f6974885e73daf092939ff881b1a430a41b9709e864409c5f00741f2a41808fb540c8d75d765738469b46e87207bb4f0a66149d6e4e3a655291cb4270431cc2f222408e7c4bf969734628850e6a7c92e7d1c';
    let b = Block.deserializeBinary(BitUtil.base16ToBytes(hex));
    console.log('block hash is %s', BlockUtil.hashBlockAsHex(BitUtil.base16ToBytes(hex)));
    for (let i = 0; i < b.getTxobjList().length; i++) {
      const txObj = b.getTxobjList()[i];
      console.log('tx# %s', i);
      const data = txObj.getTx().getData_asU8();
      if (txObj.getTx().getCategory() === 'INIT_DID') {
        const initDid = InitDid.deserializeBinary(data);
        console.log('tx %o', initDid.toObject());
      } else {
        console.log('tx %s', BitUtil.bytesToBase16(data));
      }
    }
    for (let i = 0; i < b.getSignersList().length; i++) {
      const signer = b.getSignersList()[i];
      const signerAddress = await BlockUtil.recoverSignerAddress(b, i);
      const role = i == 0 ? 'validator' : 'attestor';
      console.log(`${role} signer #${i} ${signerAddress} signed with sig: ${StrUtil.fmt(signer.getSig_asU8())}`);
    }
    const obj = b.toObject();
    console.log('b %o', obj);
    // todo add full check
    // const check = await BlockUtil.checkBlockFinalized(b);
    // console.log(check);
    // expect(check.success).to.be.equal(true);
  })
})

describe('signature tests', async function () {

  it('self-sign INIT DID and verify', async function () {
      let tx = await buildInitDidTx();
      console.log('signed tx %o', tx.toObject());
      console.log('signed tx %o', StrUtil.fmtProtoBytes(tx));
      const check = await BlockUtil.checkTxSignature(tx);
      console.log('check tx %o', check);
      expect(check.success).to.be.equal(true);
    }
  )

  it('self-sign CUSTOM ETH tx and verify', async function () {
      let tx = await buildCustomTx1();
      tx.setSignature(null); // no signature
      let wallet = getUserWallet(0);
      tx.setSender('eip155:1:' + wallet.address);
      await BlockUtil.signTxEVM(tx, wallet);
      console.log('signed tx %o', tx.toObject());
      console.log('signed tx %o', StrUtil.fmtProtoBytes(tx));
      const check = await BlockUtil.checkTxSignature(tx);
      console.log('check tx %o', check);
      expect(check.success).to.be.equal(true);
    }
  )

  it('self-sign CUSTOM SOL tx and verify', async function () {
    let tx = await buildCustomTx1();
    tx.setSignature(null); // no signature

    let solanaPrivateKey = BitUtil.base16ToBytes("ae2f9a10cac1ce71c7be3585a9af1f38de358abde0d875ad0a95352d49fbedf60fb9ba52b1f09445f1e3a7508d59f0797923acf744fbe2da303fb06da859ee87");
    const addrStr = SolUtil.convertPrivKeyToAddr(solanaPrivateKey);
    const sender = 'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp:' + addrStr;
    tx.setSender(sender);
    await BlockUtil.signTxSolana(tx, solanaPrivateKey);

    console.log('signed tx %o', tx.toObject());
    console.log('signed tx %o', StrUtil.fmtProtoBytes(tx));
    const check = await BlockUtil.checkTxSignature(tx);
    console.log(check.err);
    expect(check.success).to.be.equal(true);
  });

  it('check tx from SDK - init did V3', async function () {
    // signed by master private key
    let hex = '1208494e49545f4449441a37707573683a6465766e65743a7075736831756473723239657067346666363933346e757933786d65357768656d713378727573756632642aad0e0a423033663038313332366237376632323038346136613131663032343563666135633465393436306665623437656139386131366133393936613438303037393139631080808080081a4230326466383864353735613262653430326664386465626135356165303863323837616338636531313535623566376532303039663739306533363666323361303922aa040a37707573683a6465766e65743a70757368313876346a6d6c303377617178706e76656b37713967327563387a32763338737077643071716a12ee030aa8030afea186533313266626362393430343665396363303032616338632207707573683a76352a403036636533643730333236616462363266616261663563653361396137366364303635393366383132373161356536373665383664616335343232353335306312418e11f71cad99e48bb6f1d659ece1a12e46cfce212ad8a2d30f161da3b0f5e1a3626f24d9f8b24dcdbb191f94d7b7211c8b9ff4472d258d8e701ffd89db4bb57c1b22a6040a336569703135353a313a30783335423834643638343844313634313531373763363444363435303436363362393938413661623412ee030aa8030afea183635316631346661366663636362383639313435343739392207707573683a76352a406562333432316633363238396335323737633162333233353965323135656433653665616234343061666563376433316461303163616330373036623634303912411430ef3b5d43b419408a060a38c2448583e28d0eae342950a180d119051d0ca81862f94c621b5dc4eaa8265d2be13f94784e80f58000711fdea393953a9b132b1c22c6040a54736f6c616e613a3565796b7434557346763850384e4a64545245705931767a714b715a4b7664703a36394555594a4b72324e453876484670687952505355327471526258684d7539677a4e6f39366d6a76464c7612ed030aa8030afea183030653464373538306136306638636436336430326332372207707573683a76352a40376535363935613230363531656464303734383066363036323535356330353439343733643964326531633162313864663833396635343830663232383561301240dc774dac03960800693fc63275383a23286d2ada59483dd06c151bfad3e81a8d3e08a4438a9cfbab7d642efc4e6136f3395a6956d153ceb779f783d44a095a0832104730187ea6474746b24c529a99edc3e93a9f0f56543165794a756232526c6379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b344e444d304e7a41784d7a4173496e4a68626d52766255686c65434936496a646a4e32457859324e6c596a49344d574d794f5467314d54457a4d7a6c684f4467315a6d51774f446b30595463785a6a41324e6a67694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b344e444d304e4441794d6a4573496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5467304d7a51304d4445304e437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344d4451354e7a41324d474e6b4d5449344d3249355a4755304d544d79597a55304e5751304f545134596d566a5a6d4d314d544d334f445a6a4d7a4d31595759345a54466d597a686b5a5459354e4459304d6a63305a6a4e6b5a5749315a6a6b334f44686b4d6d55314d5467324f446331596d4d31593245354d4452685a6d52695954633159545130596a6b325a57597a597a526c4e545133597a466b4d4449344d6a45305a54457a4d47497859694a394c487369626d396b5a556c6b496a6f694d4867354f45593552446b784d45466c5a6a6c434d304935515451314d544d3359575978513045334e6a63315a5551354d4745314d7a55314969776964484e4e6157787361584d694f6a45334d6a6b344e444d304e7a41784d544573496e4a68626d52766255686c65434936496a686d4d6a51304d47566b596d4d7a59325131596a55344e7a4d784f44466a4e6a6b794f444a6c5a5463305a545177593246694e3255694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b344e444d304e4441794e546373496e4e3059585231637949364d58307365794a756232526c535751694f69497765475a45515556685a6a64685a6b4e47596d49305a54526b4d545a45517a5932596b51794d444d355a6d51324d44413051305a6a5a5467694c434a306330317062477870637949364d5463794f5467304d7a51304d4445334f537769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344d544d314d44637a4d57526b59546c6c4d44553459324d3359324a694f54526c4e6a55304e6a4a6b4e6d59784d5751304f4451775a5459315a446b334d324a6d4e6a6777596a4d7a4f5759794e7a526d5a474e694f5451314d6a49334e5452694e7a466d4e7a45794d57566d4e4459325a444a6d5a6a63324d57566a595467334f4463324d546b795a44686c5a4449325a6a6b774d4749335a474e6b5a44566d5a44457a4d474d785a6a637859794a394c487369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b344e444d304e7a41784f446b73496e4a68626d52766255686c65434936496a4e694e5459354e5751774e5455305a4756684f4459304f545a695a6a42684d6d4d775a475a6b4f475535595455305a44466c4f5445694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b344e444d304e7a41784d6a5173496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5467304d7a51334d4441354e537769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344d324e6d4d4455334e444d314e6a63315a6d5932596a59774e7a4a684f5456694e5467774d6d45354d7a686c4f545530596a51784e7a59304d54566b4d545932595463324e6a51344e444668595449314d574a695a544d334d6d55354f5463774d3245774d325a685a544d335a444d305a475a6859545a6a4d7a466d4f57466b4f444e684f544d794d7a513559545a6c59544d7a4d545179596d59344d474d305a6d4d32596a6c694e54497859694a395858303d42419dba43203bff3fe97d2572011b80d02b1970f922c6d31fdf7b2ca3d5834c7b210fa7766805f5f8874546d5ce7daa1b47a13f5f42f1c1fbd9ca0c8512aef3f2221c4a0130';
    let tx = Transaction.deserializeBinary(BitUtil.base16ToBytes(hex));
    const initDid = InitDid.deserializeBinary(tx.getData_asU8());
    console.log('tx %o', tx.toObject());
    console.log('initDid %o', initDid.toObject());
    const check = await BlockUtil.checkTx(tx);
    console.log(check);
    expect(check.success).to.be.equal(true);
  })

  it('check tx from SDK - solana', async function () {
    // signed by `69EUYJKr2NE8vHFphyRPSU2tqRbXhMu9gzNo96mjvFLv`
    let hex = '1210435553544f4d3a505553485f4d41494c1a54736f6c616e613a3565796b7434557346763850384e4a64545245705931767a714b715a4b7664703a36394555594a4b72324e453876484670687952505355327471526258684d7539677a4e6f39366d6a76464c7622336569703135353a313a3078443836333443333942424664343033336330643332383943343531353237353130323432333638312a6d0a0f57656c636f6d6520546f205075736812480a46436f6e67726174756c6174696f6e73206f6e206265696e672073656c656374656420666f722050757368204164766f636174650a0a52656761726473205465616d205075736822100a085072696f726974791204486967683210b51e8e7ac9ea40858c022304b38b6d723a9f0f56543165794a756232526c6379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45304e6a41774f444173496e4a68626d52766255686c65434936496d593259544977593259785a6a4d314d44526d596d45784e7a4a6b593249794d4441324e6a55304d324d344f5449795a5449304d3245694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45304e6a41774e544973496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5449334d5451324d4441314f437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a4234597a5131597a63775a574d79596d4d784f5459324d6a6c684d5463304d47466a4f474d784d44686b4d6d466b5a6d51314d6d493159545979595445795a6a6b35595755784d474d354d57497a4e4459314d4459785a444e694d325977596d557a4d6a4e684e7a41774e4751324d4449355a446b354d4456684e6d4a6a5a6a51325a47466b5a6a51334f5749324d6a4a6d4f5441304d3259334e7a42684e32566a4d3256694e324d325932517859794a394c487369626d396b5a556c6b496a6f694d4867354f45593552446b784d45466c5a6a6c434d304935515451314d544d3359575978513045334e6a63315a5551354d4745314d7a55314969776964484e4e6157787361584d694f6a45334d6a6b794e7a45304e6a41774e6a4173496e4a68626d52766255686c65434936496d4d794f54466a595745344f44597a4e444a6d593255784d57526d4e6a6b344f446331597a566a5a5755354d32497a4d546779596a63694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45304d7a41774e6a5973496e4e3059585231637949364d58307365794a756232526c535751694f69497765475a45515556685a6a64685a6b4e47596d49305a54526b4d545a45517a5932596b51794d444d355a6d51324d44413051305a6a5a5467694c434a306330317062477870637949364d5463794f5449334d54517a4d4441334f437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a4234596a426b4d6a4e6c4d7a526b4e6a4d304d4445774e5441305a5449334d5749314e7a4d34596a6c695a6a566d59324d784d5463344d6d566a4d4445305a6d59334e6d5934593255334d7a55314e57526a5a6d49775a544d7a4e574a684f444135595756695a574d334d5459325a6a4d334d57526b4d446c6b4f4745344d544d334d7a59325a574d32597a6c6a4e7a67774e575930595751345a6d5a695a4751795a4759334f5449784d32597859794a394c487369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45304e6a41774f445173496e4a68626d52766255686c65434936496d5a6a4f574d794d6d4a6d5a4759314d6a46684e446c6b4d5755314f474e6c5a5467334e6a63774e574a6b596a52684d6a6869596d4d694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45304e6a41774e7a6373496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5449334d5451324d4441334d437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344d5755795a474e694e544a6a4e7a45325a544d345957526d5932457a595749794d7a55795a6d59794e444978595449314d446b324d44646a5a4467304e444a684f5467774e6a41335a444134596a6b344f475a684d6a4d355a544933596a49784d3245305a6d5a6d4d7a566a4f5755334d6a6c695a54413259324d795a44597a4e6a4e6b5a6a4d34596d5a6b4e4468684d7a526d595759784e5441324d4759774d7a55344d54526a4d47457859794a395858303d42408db49a8d88ea0b5a0cea8a0bf90fc51fdc870cf6a6eccc428150fbbff51a691b3a1fa19d29bc0f60bc061ad4768c5f73f602e245047629b320c96c08229ea3014a0130';
    let tx = Transaction.deserializeBinary(BitUtil.base16ToBytes(hex));
    console.log('tx %o', tx.toObject());
    const check = await BlockUtil.checkTx(tx);
    console.log(check);
    expect(check.success).to.be.equal(true);
  })

  it('check tx from SDK - evm', async function () {
    // signed by `eip155:1:0x35B84d6848D16415177c64D64504663b998A6ab4
    let hex = '1210435553544f4d3a505553485f4d41494c1a336569703135353a313a30783335423834643638343844313634313531373763363444363435303436363362393938413661623422336569703135353a313a3078443836333443333942424664343033336330643332383943343531353237353130323432333638312a740a0e446576636f6e205469636b65747312500a4e4465617220557365720a436f6e67726174756c6174696f6e73206f6e206265696e672073656c656374656420666f722067657474696e67207469636b65747320746f20446576636f6e203230323422100a085072696f72697479120448696768321027d5c07d7d5b4e719db21915169efb573a9f0f56543165794a756232526c6379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45794f4441774e544973496e4a68626d52766255686c65434936496a6b32596a63345a6a646d4e7a4e694d546733596a4d784e6a51794e3259314f47497a595755785a545a685a4745794d6d55304d5445694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45794e5441784f545573496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5449334d5449314d4445304e797769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42345a546b7a4e54517a4e7a686d4f4759344d57566d4e6a6b32597a5a6d4e4451305a574532596a4d794e6d55774d6a4e685932566b597a46695a6a55774d6d52694d54526d596a4934596a45344d6a4e6d596a686b4d44566b5a546c6b597a51324e7a466a5a44526a4e6d4d7a596a67784e4751305a6a493259544e6d4e574d3459574931593256684f5449354e6a55345a5455324e544e694d5463314f544e695a4755305a5455344d54517859694a394c487369626d396b5a556c6b496a6f694d4867354f45593552446b784d45466c5a6a6c434d304935515451314d544d3359575978513045334e6a63315a5551354d4745314d7a55314969776964484e4e6157787361584d694f6a45334d6a6b794e7a45794f4441774e545973496e4a68626d52766255686c65434936496d55784d475268596a51784e546c695a4467304d6a67304e5463354e7a59354e6a55314e32566a4f446b334d5463304e7a466d4d544d694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45794e5441784e544973496e4e3059585231637949364d58307365794a756232526c535751694f69497765475a45515556685a6a64685a6b4e47596d49305a54526b4d545a45517a5932596b51794d444d355a6d51324d44413051305a6a5a5467694c434a306330317062477870637949364d5463794f5449334d5449314d44457a4d437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344e6a426c4d546c6b5a54426d4e6d4d325a575a694f5449304d6a45354e5749344d446379597a6c695a5451314d7a45324d546b314d4455314e5452684e7a68694f444a6b4d5467354d7a566d4e57526b5a4455345a6a4a6b5a6d56685a4464685a6d59315a574a684f5441354e4751794e6a4a694e5446684e6a64684e6a4d344e7a4a6a4e6d59344e7a6b344e47557a4d6a67354d7a4d3359574d304e444e694e5467784e44646b4f44597859794a394c487369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45794f4441774e6a5573496e4a68626d52766255686c65434936496d59314e474d324f5451314e4467325a4755354e6a4d78596a4e6c4e575a694e57526a4e5441304f47497a4e5749334d6a426d596d45694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45794e5441774f544573496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5449334d5449314d4445784d697769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42345a6a59305a5464685a445978595451354d7a41344e44497a597a59794d6d49354d6a4a6b4d54566b5954526d597a63324d6a6b794d546c6d596a6c684e6a63324e44646d59574d775a6d5a695a6d4d775a6a4a6a4e4459304d6d457a4e6a4531597a45304f5745324e6a566c4f5455344f444934596d4a694f44597759574d334e6d59334f5441344d7a686a5a5441344f47457a597a4579597a45324d7a55345954637a4d7a4e6b5a47557859794a395858303d424152ffaa59451eb11fca4770f5d8f958603deb189359ab3fbb9cf30793095573b87dfb8ba4d979d0a69ed48bc6a145d58ea5783b59a40ba758168ffb8961fdde391b4a0130';
    let tx = Transaction.deserializeBinary(BitUtil.base16ToBytes(hex));
    console.log('tx %o', tx.toObject());
    const check = await BlockUtil.checkTx(tx);
    console.log(check);
    expect(check.success).to.be.equal(true);
  })

  it('check tx from SDK - push network', async function () {
    // signed by `push:devnet:pushconsumer1ulpxwud78ctaar5zgeuhmju5k8gpz8najcvxkn`
    let hex = '1210435553544f4d3a505553485f4d41494c1a3f707573683a6465766e65743a70757368636f6e73756d657231756c707877756437386374616172357a676575686d6a75356b3867707a386e616a6376786b6e2a200a047465737412060a047465737422100a085072696f72697479120448696768321083f01bffe4ff45f6acb525a54dc7277e3a9f0f56543165794a756232526c6379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b324e7a45324d4441774e7a4173496e4a68626d52766255686c65434936496d45324d6a41324f5459314e7a51314d4445324e4449794e47526a4d444e6b4f545a6c5a5467774d4459304f54686b4d7a45304d6a45694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b324e7a45314e7a41774f446773496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5459334d5455334d4441324e437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42345a57566d4f445a694d5759314d4759324f574d794e4445314f57457a5a4449794f474d795a6a4e6c4d324579597a417a4d4749784f5449785a544a6a4e6a426b5a6a5179595745334f5467775a6a4d355a4463354e6a517a4d32566a4e324e6a4e6d49344e57497a597a64684d6a51345a6d4d7a4e7a426b5a6a67784e6a646a4e4463774f5468694d7a517a4e4751324e4745784d6d5530596a526b595745355a4749344e6a55334f44677859794a394c487369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b324e7a45324d4441774e546373496e4a68626d52766255686c65434936496a6b794d5455334d5468684e324d7a4e6d49304d6d5a6d4e325530593259334e325977593256684e6d49344e7a526b4e6a49355a6d55694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b324e7a45314e7a41774e6a4d73496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5459334d5455334d4441304e437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344e545a6a4e7a466b5a44426c4d4751315a47466d4d54557a5a44686d596a686b596a646b4f5459325a6a4d355a44466c4f4467334f445a6a4e6a4178596d49794d446b785a44497759574a6c4f5755324d3246695a54426a5a44413359324a6a4e6d46694e57466a4e6d4d7a596d5a6a4d445534596a566a59324a6a4e6a67784e7a5977597a566b4d4749324e544e684f4442684d6a55304d54497a4e4746694f5751325a54517a597a557859794a394c487369626d396b5a556c6b496a6f694d4867354f45593552446b784d45466c5a6a6c434d304935515451314d544d3359575978513045334e6a63315a5551354d4745314d7a55314969776964484e4e6157787361584d694f6a45334d6a6b324e7a45324d4441774f446773496e4a68626d52766255686c65434936496a45314f474d31597a41325a4459334e5751304d44417a4e546b774f4445774e6a686a597a5130596a457a4d444e6c4d54566c4e6d51694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b324e7a45314e7a41774e7a4173496e4e3059585231637949364d58307365794a756232526c535751694f69497765475a45515556685a6a64685a6b4e47596d49305a54526b4d545a45517a5932596b51794d444d355a6d51324d44413051305a6a5a5467694c434a306330317062477870637949364d5463794f5459334d5455334d4441314d797769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344e4455324d47526a4d5459774d7a5132597a457a4e54526a4f444d344f54686a4e7a63314d324a6a4d546378595459794d4455775a546379597a466a4d5456684f5455784d6a63785a6a56694d444d78596a426c597a5133596d59324e325a684e6a5577596a426c4d7a4a68596a4d774d6d5535597a6b344d546b775a444a6a597a55795a474a6b4e44566d5a4445324d3245335954646c4f574e6d596a6c6a59546b354d7a63345a47517859794a395858303d424129e393b87724b2d2b677d94a6b574f811b053b4033c3a81cac80f1f19cc9f1f723b0901d1327d2418c33a6b8647f80ee850f8c2ee477caaafb34e28c45ee13c01b4a0130';
    let tx = Transaction.deserializeBinary(BitUtil.base16ToBytes(hex));
    console.log('tx %o', tx.toObject());
    const check = await BlockUtil.checkTx(tx);
    console.log(check);
    expect(check.success).to.be.equal(true);
  })

  it.skip('sign STARKNET tx and check that signature matches the sender', async function () {
      // NOT SUPPORTED YES; fullPublicKey REQUIRES RPC CALL to the blockchain
      let tx = await buildCustomTx1();
      tx.setSignature(null); // no signature

      const starkNetPrivateKey = BitUtil.base16ToBytes('1234567890987654321');
      const addrStr = StarkNetUtil.convertPrivKeyToAddr(starkNetPrivateKey);
      const sender = 'starknet:SN_MAIN:0x' + addrStr;
      tx.setSender(sender);
      await BlockUtil.signTxStarkNet(tx, starkNetPrivateKey);

      console.log('signed tx %o', tx.toObject());
      console.log('signed tx %o', StrUtil.fmtProtoBytes(tx));
      const check = await BlockUtil.checkTxSignature(tx);
      console.log(check.err);
      expect(check.success).to.be.equal(true);
    }
  )

});

describe('block tests', function () {


  it('sample transaction 1', async function () {
    const t = await buildCustomTx1();
    let tBlob = t.serializeBinary();

    console.log("\n\n\ntx as base16", BitUtil.bytesToBase16(tBlob));
    console.log("\n\n\ntx as json", JSON.stringify(t.toObject()));
    let parsedT = Transaction.deserializeBinary(tBlob);
    console.log("\n\n\ntx as json (re-parsed)", JSON.stringify(parsedT.toObject()));
    console.log("\n\n\ntx api token as string", StrUtil.fmt(BitUtil.bytesUtfToString(parsedT.getApitoken_asU8())));
    console.log("\n\n\ntx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(tBlob)));

  })
  it('sample random transaction', async function () {
    const t = await buildCustomTxRandom();
    let tBlob = t.serializeBinary();

    console.log("\n\n\ntx as base16", BitUtil.bytesToBase16(tBlob));
    console.log("\n\n\ntx as json", JSON.stringify(t.toObject()));
    console.log("\n\n\ntx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(tBlob)));

  })

  // NOTE:
  // this test is very fragile
  // it breaks every time we change anything in signatures/txs/blocks/validation
  // Still it is a very good way of catching bugs, please re-generate block data after every change
  it('Block Validation Test', async function () {
    // this blob is made by feeding 'sample transaction 1' test case base16 data into the test net of 3 nodes
    let blockBase16 = "";

    // parse a pre-computed block
    // the only option is this code will pass the test = when everything is done the same way as in the backend logic
    // this is why this piece makes sense

    let oldBlock = Block.deserializeBinary(BitUtil.base16ToBytes(blockBase16));
    printObj('parsed Block', oldBlock);
    console.log('block is %o', oldBlock.toObject());
    BlockUtil.ATTESTOR_MAX_BLOCK_AGE_SECONDS = 0;

    let check1 = await BlockUtil.checkBlockFinalized(oldBlock, VALID_VNODES, 3);
    console.log('check1: %o', check1);
    expect(check1.success).to.be.equal(true, check1.err);

    let check2 = await BlockUtil.checkBlockAsSNode(oldBlock, VALID_VNODES, 3);
    console.log('check2: %o', check2);
    expect(check2.success).to.be.equal(true, check2.err);

    let oldBlockBytes = oldBlock.serializeBinary();
    const oldTx1 = oldBlock.getTxobjList()[0].getTx();
    let oldTxBytes = oldTx1.serializeBinary();
    let oldTxDataBytes = oldTx1.getData_asU8();
    console.log('parsed data %s', StrUtil.fmt(oldTxDataBytes));

    // now build the same block manually + Compare

    // build transaction data ------------------------------------

    let t = await buildCustomTx1();

    printObj('new Transaction', t);
    printObj('old Transaction', oldTx1);
    expect(oldTxBytes).to.deep.equal(t.serializeBinary());

    {
      const to1 = new TransactionObj();
      to1.setTx(t);
      const vd1 = new TxValidatorData();
      vd1.setVote(1);

      // block (BE VERY CAREFUL WITH THIS TEST)
      const block1 = new Block();
      // NOTE: comes from BLOB to be bit-equal
      block1.setTs(oldBlock.getTs());
      block1.setTxobjList([to1]);
      // NOTE: comes from BLOB to be bit-equal
      block1.setAttesttoken(oldBlock.getAttesttoken());

      const w0 = getNodeWallet(0);
      const w1 = getNodeWallet(1);
      const w2 = getNodeWallet(2);

      {
        // deep random reparse and re-construct (prob. to be removed)
        const attToken = BitUtil.bytesUtfToString(oldBlock.getAttesttoken_asU8()).substring(ValidatorRandom.VAL_TOKEN_PREFIX.length);
        console.log('attToken %s', attToken);
        const networkRandom = NetworkRandom.read(attToken);
        console.log('networkRandom', networkRandom);
        const w0random = networkRandom.nodes.find(value => value.nodeId === w0.address).randomHex;
        const w1random = networkRandom.nodes.find(value => value.nodeId === w1.address).randomHex;
        const w2random = networkRandom.nodes.find(value => value.nodeId === w2.address).randomHex;

        const validationVector = ValidatorRandom.calculateValidationVector(
          [w0.address, w1.address, w2.address],
          new Map([
            [w0.address, w0random],
            [w1.address, w1random],
            [w2.address, w2random]]),
          2,
          'attest',
          [w0.address]
        );
        console.log('validationVector %s', validationVector);

        expect(w2.address).to.deep.equal(validationVector[0], 'w1 is the first attestor');
        expect(w1.address).to.deep.equal(validationVector[1], 'w2 is the second attestor');
      }

      await BlockUtil.signBlockAsValidator(w0, block1);

      let patch2 = await BlockUtil.signBlockAsAttestor(w2, block1);
      let addr2 = await BlockUtil.recoverPatchAddress(w0, block1, patch2);
      expect(addr2).to.equal(w2.address);

      let patch1 = await BlockUtil.signBlockAsAttestor(w1, block1);
      let addr1 = await BlockUtil.recoverPatchAddress(w0, block1, patch1);
      expect(addr1).to.equal(w1.address);


      await BlockUtil.appendPatchAsValidator(w0, block1, patch2); // NODE 2 goes 1st because my sample blob has this
      await BlockUtil.appendPatchAsValidator(w0, block1, patch1);

      expect(await BlockUtil.recoverSignerAddress(block1, 0)).to.be.equal(w0.address);
      expect(await BlockUtil.recoverSignerAddress(block1, 1)).to.be.equal(w2.address); // NODE 2 goes 1st because my sample blob has this
      expect(await BlockUtil.recoverSignerAddress(block1, 2)).to.be.equal(w1.address);

      printObj('new Block', block1);
      printObj('old Block', oldBlock);
      expect(oldBlockBytes).to.deep.equal(block1.serializeBinary());
    }

  });

  it('reparse1', async function () {
    let txRaw = BitUtil.base16ToBytes("1208494e49545f4449441a336569703135353a313a30783335423834643638343844313634313531373763363444363435303436363362393938413661623422336569703135353a313a30783335423834643638343844313634313531373763363444363435303436363362393938413661623422346569703135353a39373a3078443836333443333942424664343033336330643332383943343531353237353130323432333638312a670a0f6469643a6578616d706c653a313233120e6d61737465725f7075625f6b6579220f646572697665645f7075625f6b657932330a177075736831303232326e333233326d7764656963656a331218737472696e6769666965645f656e637279707465645f706b321071d60eecc00f4cc8ac898784a7eeb98f3ab40b7b226e6f646573223a5b7b226e6f64654964223a22307838653132644531324333356541426633356235366230344535334334453436386534363732374538222c2274734d696c6c6973223a313732363134383637303032342c2272616e646f6d486578223a2262323637636131656661626366386264323063623763616336356330633534323865656664663338222c2270696e67526573756c7473223a5b7b226e6f64654964223a22307866444145616637616643466262346534643136444336366244323033396664363030344346636538222c2274734d696c6c6973223a313732363134383637303032302c22737461747573223a317d2c7b226e6f64654964223a22307839384639443931304165663942334239413435313337616631434137363735654439306135333535222c2274734d696c6c6973223a313732363134383637303031362c22737461747573223a317d5d2c227369676e6174757265223a22307834366331643237316663383637343435393138356132616265636637373736323961303133373066343366303766343965623431363235616565656631643033356431396664326164326437323232373162343166336536636231653735303338343730366162383336363437363837653539346362636462636632316165663162227d2c7b226e6f64654964223a22307839384639443931304165663942334239413435313337616631434137363735654439306135333535222c2274734d696c6c6973223a313732363134383637303032392c2272616e646f6d486578223a2263316662333961383232623964383261643264373437333230626165383634303634386632356137222c2270696e67526573756c7473223a5b7b226e6f64654964223a22307838653132644531324333356541426633356235366230344535334334453436386534363732374538222c2274734d696c6c6973223a313732363134383637303031372c22737461747573223a317d2c7b226e6f64654964223a22307866444145616637616643466262346534643136444336366244323033396664363030344346636538222c2274734d696c6c6973223a313732363134383637303032342c22737461747573223a317d5d2c227369676e6174757265223a22307866663737366563393736306235646134373238323130333862646631646363656162333130666531323030376262336634336636346236343535303264663466333733323234333066653333366535313661356336613734363038353465343033306235363334343633646338613064613135386131623063373861323630653162227d2c7b226e6f64654964223a22307866444145616637616643466262346534643136444336366244323033396664363030344346636538222c2274734d696c6c6973223a313732363134383637303033352c2272616e646f6d486578223a2262393331656334316233393763623164656234396536353764396437623739383764316361373530222c2270696e67526573756c7473223a5b7b226e6f64654964223a22307838653132644531324333356541426633356235366230344535334334453436386534363732374538222c2274734d696c6c6973223a313732363134383637303031352c22737461747573223a317d2c7b226e6f64654964223a22307839384639443931304165663942334239413435313337616631434137363735654439306135333535222c2274734d696c6c6973223a313732363134383637303032352c22737461747573223a317d5d2c227369676e6174757265223a22307837633964343832396336616161363535396465643833323433623665386438623665623333366439303932613261306466323533316463336364396532623335353735626462386261313134323263326663346262363737653064396365356266343464353466653538373266396530373661633339643530316237343934333163227d5d7d42412592af30c62ac73025e37826d60a250e7c4f44c3697d2868307255bcff52a4b61e9a3fa015761ebd89b3d9d1ce3e4a7ad4691c5259e56f8be2e79a486a1eb01b1b4a0130")
    const tx = BlockUtil.parseTx(txRaw);
    let txRaw2 = tx.serializeBinary();

    console.log('txRaw: %s', BitUtil.bytesToBase16(txRaw));
    console.log('txRaw2: %s', BitUtil.bytesToBase16(txRaw2));
    console.log('equals: ', BitUtil.bytesToBase16(txRaw) === BitUtil.bytesToBase16(txRaw2));
    console.log('processing tx: %o', tx.toObject());
    console.log('tx hash raw %s', BlockUtil.hashTxAsHex(txRaw));

    console.log('tx hash after reparse %s', BlockUtil.hashTxAsHex(txRaw2));
    console.log('reparsed tx: %o', Transaction.deserializeBinary(txRaw).toObject());
  });




  it('check 2 types of bytes in tx', async function () {
    const t = new Transaction();
    t.setType(0);
    t.setCategory('INIT_DID');
    t.setSender('eip155:1:0xAA');
    t.setRecipientsList(['eip155:1:0xBB', 'eip155:1:0xCC']);
    t.setData(new Uint8Array());
    t.setSalt(IdUtil.getUuidV4AsBytes()); // uuid.parse(uuid.v4())

    t.setFee("1"); // tbd
    t.setSignature(BitUtil.base16ToBytes("EE")); // fake signature
    console.log("-".repeat(40));
    console.log("tx as json", JSON.stringify(t.toObject()));


    let token = "eyJub2RlcyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMzAsInJhbmRvbUhleCI6ImY3YmY3YmYwM2ZlYTBhNzI1MTU2OWUwNWRlNjU2ODJkYjU1OTU1N2UiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNDY3MzI0MDAxOSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4YjMzM2NjMWI3MWM0NGM0MDhkOTZiN2JmYjYzODU0OTNjZjE2N2NiMmJkMjU1MjdkNzg2ZDM4ZjdiOTgwZWFkMzAxMmY3NmNhNzhlM2FiMWEzN2U2YTFjY2ZkMjBiNjkzZGVmZDAwOWM4NzExY2ZjODlmMDUyYjM5MzY4ZjFjZTgxYiJ9LHsibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjUsInJhbmRvbUhleCI6IjkyMTY4NzRkZjBlMTQ4NTk3ZjlkNDRkMGRmZmFlZGU5NTg0NGRkMTciLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyMjQ2NTAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNDY3MzIyNDY1NSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4N2JmYzQ0MjQ0ZGM0MTdhMjg0YzEwODUwZGEzNTE2YzUwNWEwNjJmYjIyYmI1ODU0ODg2YWEyOTk3OWUwMmYxOTdlZWMyYzk2ZDVkOTQ4ZDBhMWQ2NTBlYzIzNGRhMDVjMGY5M2JlNWUyMDkxNjFlYzJjY2JjMWU5YzllNzQyOGIxYiJ9LHsibm9kZUlkIjoiMHg5OEY5RDkxMEFlZjlCM0I5QTQ1MTM3YWYxQ0E3Njc1ZUQ5MGE1MzU1IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjQsInJhbmRvbUhleCI6IjBkOWExNmE4OTljYWQwZWZjODgzZjM0NWQwZjgwYjdmYTE1YTY1NmYiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyMjY5NDMsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweGZEQUVhZjdhZkNGYmI0ZTRkMTZEQzY2YkQyMDM5ZmQ2MDA0Q0ZjZTgiLCJ0c01pbGxpcyI6MTcyNDY3MzIyNjk0Nywic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4YmE2Mjk2OTZlZWU4MDQ4ZDE2OTA3MDNhZmVjYWY4ZmJjM2Y4NDMxOWQ0OTFhZGIzY2YzZGYzMzExMTllMDAyOTA1MTc3MjAyNzkxNzEzNTMzMmU0MGZiMzI2OTM5Y2JhN2Y2NDc2NmYyYjY5MzQwZTZlNGYwZmIzNjM2OThmYzkxYiJ9XX0=";
    t.setApitoken(token);

    // A have a sting in base64, you want to set(Uint8Array)

    let txAsBytes = t.serializeBinary();
    console.log("tx as base16", BitUtil.bytesToBase16(txAsBytes));
    console.log("tx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(txAsBytes)));

    t.setApitoken(BitUtil.base64ToBytes(token));
    let txAsBytes2 = t.serializeBinary();
    console.log("tx as base16", BitUtil.bytesToBase16(txAsBytes2));
    console.log("tx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(txAsBytes2)));

  })


  it('create transaction and block, serialize/deserialize', async function () {
    console.log("building ------------------------- ");
    // build transaction data (app-dependent)
    const data = new InitDid();
    data.setMasterpubkey('0xBB');
    data.setDerivedkeyindex(1);
    data.setDerivedpubkey('0xCC');
    console.log("data as json", JSON.stringify(data.toObject()));

    // build transaction
    const t = new Transaction();
    t.setType(0);
    t.setCategory('INIT_DID');
    t.setSender('eip155:1:0xAA');
    t.setRecipientsList(['eip155:1:0xBB', 'eip155:1:0xCC']);
    t.setData(data.serializeBinary())
    t.setSalt(IdUtil.getUuidV4AsBytes()); // uuid.parse(uuid.v4())
    let token = "eyJub2RlcyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMzAsInJhbmRvbUhleCI6ImY3YmY3YmYwM2ZlYTBhNzI1MTU2OWUwNWRlNjU2ODJkYjU1OTU1N2UiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNDY3MzI0MDAxOSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4YjMzM2NjMWI3MWM0NGM0MDhkOTZiN2JmYjYzODU0OTNjZjE2N2NiMmJkMjU1MjdkNzg2ZDM4ZjdiOTgwZWFkMzAxMmY3NmNhNzhlM2FiMWEzN2U2YTFjY2ZkMjBiNjkzZGVmZDAwOWM4NzExY2ZjODlmMDUyYjM5MzY4ZjFjZTgxYiJ9LHsibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjUsInJhbmRvbUhleCI6IjkyMTY4NzRkZjBlMTQ4NTk3ZjlkNDRkMGRmZmFlZGU5NTg0NGRkMTciLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyMjQ2NTAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNDY3MzIyNDY1NSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4N2JmYzQ0MjQ0ZGM0MTdhMjg0YzEwODUwZGEzNTE2YzUwNWEwNjJmYjIyYmI1ODU0ODg2YWEyOTk3OWUwMmYxOTdlZWMyYzk2ZDVkOTQ4ZDBhMWQ2NTBlYzIzNGRhMDVjMGY5M2JlNWUyMDkxNjFlYzJjY2JjMWU5YzllNzQyOGIxYiJ9LHsibm9kZUlkIjoiMHg5OEY5RDkxMEFlZjlCM0I5QTQ1MTM3YWYxQ0E3Njc1ZUQ5MGE1MzU1IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjQsInJhbmRvbUhleCI6IjBkOWExNmE4OTljYWQwZWZjODgzZjM0NWQwZjgwYjdmYTE1YTY1NmYiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyMjY5NDMsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweGZEQUVhZjdhZkNGYmI0ZTRkMTZEQzY2YkQyMDM5ZmQ2MDA0Q0ZjZTgiLCJ0c01pbGxpcyI6MTcyNDY3MzIyNjk0Nywic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4YmE2Mjk2OTZlZWU4MDQ4ZDE2OTA3MDNhZmVjYWY4ZmJjM2Y4NDMxOWQ0OTFhZGIzY2YzZGYzMzExMTllMDAyOTA1MTc3MjAyNzkxNzEzNTMzMmU0MGZiMzI2OTM5Y2JhN2Y2NDc2NmYyYjY5MzQwZTZlNGYwZmIzNjM2OThmYzkxYiJ9XX0=";
    t.setApitoken(BitUtil.base64ToBytes(token)); // fake token


    // A have a sting in base64, you want to set(Uint8Array)

    t.setFee("1"); // tbd
    t.setSignature(BitUtil.base16ToBytes("EE")); // fake signature
    console.log("-".repeat(40));
    console.log("tx as json", JSON.stringify(t.toObject()));

    const txAsBytes = t.serializeBinary();
    console.log("tx as base16", BitUtil.bytesToBase16(txAsBytes));
    console.log("tx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(txAsBytes)));
    // build block

    // transactions
    const to = new TransactionObj();
    to.setTx(t);
    const vd = new TxValidatorData();
    vd.setVote(1);
    const ad = new TxAttestorData();
    ad.setVote(1);
    to.setValidatordata(vd);
    to.setAttestordataList([ad]);

    // signers
    const s1 = new Signer();
    s1.setSig(BitUtil.base16ToBytes('CC'));
    const s2 = new Signer();
    s2.setSig(BitUtil.base16ToBytes('EE'));

    const b = new Block();
    b.setTs(DateUtil.currentTimeSeconds());
    b.setTxobjList([to]);
    b.setAttesttoken('DD'); // fake attest token
    b.setSignersList([s1, s2]);
    b.setAttesttoken(BitUtil.base16ToBytes("C1CC"));
    console.log("block as json", JSON.stringify(b.toObject()));

    const blockAsBytes = b.serializeBinary();
    console.log("block as base16", BitUtil.bytesToBase16(blockAsBytes));
    console.log("block hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(blockAsBytes)));


    // PARSE it back into objects
    console.log("parsing ------------------------- ");
    let t2 = Transaction.deserializeBinary(txAsBytes);
    console.log("tx2 as json", JSON.stringify(t2.toObject()));

    let b2 = Block.deserializeBinary(blockAsBytes);
    console.log("block2 as json", JSON.stringify(b2.toObject()));
  });

  it('test for setting data as string (do not use this)', async function () {
    const t = new Transaction();
    let originalData = "AABB";
    console.log('assign data ', originalData);
    let encoded = BitUtil.bytesToBase64(BitUtil.base16ToBytes("AABB"));
    console.log('encoded for assignment ', encoded);
    t.setData(encoded);
    console.log("t as bin", BitUtil.bytesToBase16(t.serializeBinary()));
    let protoEncodedAndDecoded: any = Transaction.deserializeBinary(t.serializeBinary()).getData();
    console.log('expeced assigned data, to be ', originalData, "but got", protoEncodedAndDecoded, '=', BitUtil.bytesToBase16(protoEncodedAndDecoded));
  });

})


// for printing the wallet info
async function loadWalletInfos(): Promise<WalletInfo[]> {
  const walletFiles = [
    {name: 'v1', filePath: 'docker/v1/validator_eth_key.json', password: 'test'},
    {name: 'v2', filePath: 'docker/v2/validator_eth_key.json', password: 'test'},
    {name: 'v3', filePath: 'docker/v3/validator_eth_key.json', password: 'test'},
  ];

  const walletInfos: WalletInfo[] = await Promise.all(
    walletFiles.map(async ({filePath, password}) => {
      const json = fs.readFileSync(filePath, 'utf8');
      const wallet = await Wallet.fromEncryptedJson(json, password);
      return {
        address: wallet.address,
        publicKey: wallet.publicKey,
        privateKey: wallet.privateKey,
      };
    })
  );
  return walletInfos;
}


describe('sharding tests', function () {
  it('calculate shard', async function () {

    let sample = [
      'eip155:1:0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb',
      'eip155:0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb',
      'bip122:000000000019d6689c085ae165831e93:128Lkh3S7CkDTBZ8W7BbpsN3YYizJMp8p6',
      'cosmos:cosmoshub-3:cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0',
      'polkadot:b0a8d493285c2df73290dfb7e61f870f:5hmuyxw9xdgbpptgypokw4thfyoe3ryenebr381z9iaegmfy',
      'starknet:SN_GOERLI:0x02dd1b492765c064eac4039e3841aa5f382773b598097a40073bd8b48170ab57',
      'hedera:mainnet:0.0.1234567890-zbhlt'
    ];

    for (const s of sample) {
      console.log('%s maps to shard %s', s, BlockUtil.calculateAffectedShard(s, 32));
    }
  });


  it('calculate shards', async function () {

    let sample = [
      'eip155:1:0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb',
      'eip155:0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb',
      'bip122:000000000019d6689c085ae165831e93:128Lkh3S7CkDTBZ8W7BbpsN3YYizJMp8p6',
      'cosmos:cosmoshub-3:cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0',
      'polkadot:b0a8d493285c2df73290dfb7e61f870f:5hmuyxw9xdgbpptgypokw4thfyoe3ryenebr381z9iaegmfy',
      'starknet:SN_GOERLI:0x02dd1b492765c064eac4039e3841aa5f382773b598097a40073bd8b48170ab57',
      'hedera:mainnet:0.0.1234567890-zbhlt'
    ];

    let addrs = ChainUtil.generateRandomAddresses(sample, 1000)
    console.log(addrs);

    const MAX_SHARDS = 64;
    for (let shardCount = 1; shardCount < MAX_SHARDS; shardCount++) {


      /*
      Map checks for this case
        shard1 -> 5 addresses
        shard2 -> 3 addresses
        shard0 -> 0 addresses (bad!)
       */
      let shardToNumOfAddresses: Map<number, number> = new Map();
      for (const a of addrs) {
        let shardId = BlockUtil.calculateAffectedShard(a, shardCount);
        // console.log('shardId: %s -> %s', a, shardId);
        assert.isTrue(shardId != null && shardId >= 0);
        assert.isTrue(shardId < shardCount);

        let oldCounter = shardToNumOfAddresses.get(shardId);
        if (oldCounter == null) {
          shardToNumOfAddresses.set(shardId, 1);
        } else {
          shardToNumOfAddresses.set(shardId, ++oldCounter);
        }
      }
      if (shardCount > 4) {
        let minSize = 100000000000;
        let maxSize = 0;
        for (const [shardId, count] of shardToNumOfAddresses) {
          // console.log('shardId: %s has %s addresses', shardId, count);
          minSize = Math.min(minSize, count);
          maxSize = Math.max(maxSize, count);
        }
        const delta = maxSize - minSize;
        const maxDelta = addrs.length / 10;
        if (delta > maxDelta) {
          console.log('shardCount: %s is not balanced', shardCount);
        }
      }
    }

  })
});
