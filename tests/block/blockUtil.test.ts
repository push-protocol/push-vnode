// noinspection DuplicatedCode

import 'mocha'
import {assert, expect} from 'chai'
import {
  Block, EncryptedText,
  InitDid,
  Signer,
  Transaction,
  TransactionObj,
  TxAttestorData,
  TxValidatorData, WalletToEncDerivedKey
} from "../../src/generated/push/block_pb";
import IdUtil from "../../src/utilz/idUtil";
import {BitUtil} from "../../src/utilz/bitUtil";
import {HashUtil} from "../../src/utilz/hashUtil";
import {DateUtil} from  "../../src/utilz/dateUtil";
import {BlockUtil} from "../../src/services/messaging-common/blockUtil";
import {ethers, Wallet} from "ethers";
import fs from "fs";
import {StrUtil} from "../../src/utilz/strUtil";
import {NetworkRandom, NodeRandom, ValidatorRandom} from "../../src/services/messaging/validatorRandom";
import {ChainUtil} from "../../src/utilz/chainUtil";
import {SolUtil} from "../../src/utilz/solUtil";
import {StarkNetUtil} from "../../src/utilz/starkNetUtil";
import {PushSdkUtil} from "../../src/services/messaging-common/pushSdkUtil";


type WalletInfo = {
  address: string;
  publicKey: string;
  privateKey: string;
};


// test nodes private keys
// DO NOT USE THEM ANYWHERE
let NODE_KEYS: WalletInfo[] = [
  {
    address: '0x8e12dE12C35eABf35b56b04E53C4E468e46727E8',
    publicKey: '0x044c6cc0547e97253814528c616fbb3aa6ebd4a306cf43521a8f9a2ee187d1c3a70adba740eb5592c68f408cf848eb9621985e5c269ec37ad27845a542ae8c6afd',
    privateKey: '0x33fb23f822c5dba0f3cb2796b90d56bb553ebd215726398c93374440b34e510b'
  },
  {
    address: '0xfDAEaf7afCFbb4e4d16DC66bD2039fd6004CFce8',
    publicKey: '0x04f4c9461d8babf5962f48e3ed1f94748247d330eca80dba31986055b6c05c97d13a4f99c4cf3e304ab803f99042978a386ed08f56d68dda59948ea8a70918f157',
    privateKey: '0x16c90855a0dfc9884adf2625a4bffcdbfe760d5ff6756a766d2bbc0bc82318f0'
  },
  {
    address: '0x98F9D910Aef9B3B9A45137af1CA7675eD90a5355',
    publicKey: '0x043b668e94ed022dc14a48a730421b5e6b83fccea79de60d7eb2627743020431be0a6746a885327d5fccd10ccc046659f58e880c4b8009a4e028a42497d1ccd157',
    privateKey: '0xb6c538bac86eb0964b16b7ff6a1ac7d5f0736dcbd0f00bd142ae433dad27f685'
  }
];

// test eth user private keys from hardhat (these are publicly known)
let USER_KEYS: WalletInfo[] = [
  {
    address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
    publicKey: null,
    privateKey: '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80'
  },
  {
    address: '0x70997970C51812dc3A010C7d01b50e0d17dc79C8',
    publicKey: null,
    privateKey: '0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d'
  },
  {
    address: '0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC',
    publicKey: null,
    privateKey: '0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a'
  }
]

let VALID_VNODES = new Set<string>(NODE_KEYS.map((wallet) => wallet.address));


function getNodeWallet(index: number): Wallet {
  return new Wallet(NODE_KEYS[index].privateKey);
}

function getUserWallet(index: number): Wallet {
  return new Wallet(USER_KEYS[index].privateKey);
}

let masterKeyIndex = 2;

function printObj(msg: string, obj: any) {
  console.log(msg);
  console.log('%s\n%o', StrUtil.fmtProtoBytes(obj), obj.toObject());
}

function getMasterKey() {
  return getUserWallet(2);
}

async function buildInitDidTx() {
  const data = new InitDid();
  data.setMasterpubkey(getMasterKey().publicKey);
  data.setDerivedkeyindex(1);
  data.setDerivedpubkey('0xCC');

  let et = new EncryptedText();
  et.setSalt('qaz');
  et.setNonce('');
  et.setVersion('push:v5');
  et.setPrekey('');
  et.setCiphertext('qwe');
  let wa = new WalletToEncDerivedKey();
  wa.setEncderivedprivkey(et);
  wa.setSignature(BitUtil.base16ToBytes("112233"));
  data.getWallettoencderivedkeyMap().set('0xAA', wa);

  const t = new Transaction();
  t.setType(0);
  t.setCategory('INIT_DID');
  t.setRecipientsList(
    ['eip155:1:' + getUserWallet(1).address,
      'eip155:1:' + getUserWallet(2).address]);
  t.setData(data.serializeBinary())
  t.setSalt(BitUtil.base64ToBytes('cdYO7MAPTMisiYeEp+65jw=='));
  const apiToken = 'VT1eyJub2RlcyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyODAwMjMsInJhbmRvbUhleCI6ImFjM2YzNjg5ZGIyMDllYjhmNDViZWEzNDU5MjRkN2ZlYTZjMTlhNmMiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyNTAwMjEsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyODY3MTI1MDAyMSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4MTA0ZmIwNTEzNTJiYTcxYjM4Zjk5M2ZhNDZiY2U2NGM2ZDMyYzBhZDRlZWYxZTgxODVjZjViMDRmYmVjOGM4YTRmMDhmYzg3MzBjZGI4NDcyMmZkYTIxMDU3MzRkOWU5MGNjMzlmZGE0ZjVkMTYxZjljOWFiNGEyMzIxM2RlZGExYyJ9LHsibm9kZUlkIjoiMHg5OEY5RDkxMEFlZjlCM0I5QTQ1MTM3YWYxQ0E3Njc1ZUQ5MGE1MzU1IiwidHNNaWxsaXMiOjE3Mjg2NzEyODAwMjAsInJhbmRvbUhleCI6Ijk5NTAyYmM4MWQyNWE2NjdlODlmYTZkNmY3ZDBjZmUxNzdmODkyZjMiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyNTAwMjIsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweGZEQUVhZjdhZkNGYmI0ZTRkMTZEQzY2YkQyMDM5ZmQ2MDA0Q0ZjZTgiLCJ0c01pbGxpcyI6MTcyODY3MTI1MDAyMSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4MmRiNjY4MTI5NGY0NGVhMzVmYWUxZGRhODhhMTIyZjk1NTBlNjg4MzIwZGY1MzU1MDJmNjQ1N2U2YmYyNmEwYzIzOGVjNDlkNTFhNGM3MTlmODhhYzEzMWFmOGIyZTcxOTdhOWY4MGQzMDAyYThkOTQ4YzM5YTU4NDgzNTYwYzQxYiJ9LHsibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyODAwMjQsInJhbmRvbUhleCI6IjYzYWIxYWU4ZDk0MDNkY2I1NzM4NGZiNzE0NDQyYmIyMmI0NjYxN2UiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyNTAwMjIsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyODY3MTI1MDAyMiwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4M2Q3ZDAxMzdiNGE0MWNlNDczZTljZjBkNDkzZWE4OTM0YWFhZWIxYThiZGFlNzFlMWYyNTM1MDYxZDc2MjAxMTIyMDY5ZTYzOGU3ZTBkMmNiY2U1MmFiN2I3YzZlMTkwYzJlNWEzM2U1YTVkZjg0ZTJmY2ViZjllZDgwODlkMjgxYyJ9XX0=';
  t.setApitoken(BitUtil.stringToBytesUtf(apiToken)); // fake token
  t.setFee("0"); // tbd

  let wallet = getMasterKey();
  const pushAddr = PushSdkUtil.evmAddrToPushAddr(wallet.address);
  const pushAddrCaip = 'push:1:' + pushAddr;
  t.setSender(pushAddrCaip); // some push chain address generated;
  await BlockUtil.signInitDid(t, wallet);
  return t;
}

async function buildCustomTx1() {
  const data = BitUtil.base16ToBytes("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");

  const t = new Transaction();
  t.setType(0);
  t.setCategory('CUSTOM:EMAIL');
  t.setSender('eip155:1:' + getUserWallet(0).address);
  t.setRecipientsList(
    ['eip155:1:' + getUserWallet(1).address,
      'eip155:1:' + getUserWallet(2).address]);
  t.setData(data)
  t.setSalt(BitUtil.base64ToBytes('cdYO7MAPTMisiYeEp+65jw=='));
  const apiToken = 'VT1eyJub2RlcyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyODAwMjMsInJhbmRvbUhleCI6ImFjM2YzNjg5ZGIyMDllYjhmNDViZWEzNDU5MjRkN2ZlYTZjMTlhNmMiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyNTAwMjEsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyODY3MTI1MDAyMSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4MTA0ZmIwNTEzNTJiYTcxYjM4Zjk5M2ZhNDZiY2U2NGM2ZDMyYzBhZDRlZWYxZTgxODVjZjViMDRmYmVjOGM4YTRmMDhmYzg3MzBjZGI4NDcyMmZkYTIxMDU3MzRkOWU5MGNjMzlmZGE0ZjVkMTYxZjljOWFiNGEyMzIxM2RlZGExYyJ9LHsibm9kZUlkIjoiMHg5OEY5RDkxMEFlZjlCM0I5QTQ1MTM3YWYxQ0E3Njc1ZUQ5MGE1MzU1IiwidHNNaWxsaXMiOjE3Mjg2NzEyODAwMjAsInJhbmRvbUhleCI6Ijk5NTAyYmM4MWQyNWE2NjdlODlmYTZkNmY3ZDBjZmUxNzdmODkyZjMiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyNTAwMjIsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweGZEQUVhZjdhZkNGYmI0ZTRkMTZEQzY2YkQyMDM5ZmQ2MDA0Q0ZjZTgiLCJ0c01pbGxpcyI6MTcyODY3MTI1MDAyMSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4MmRiNjY4MTI5NGY0NGVhMzVmYWUxZGRhODhhMTIyZjk1NTBlNjg4MzIwZGY1MzU1MDJmNjQ1N2U2YmYyNmEwYzIzOGVjNDlkNTFhNGM3MTlmODhhYzEzMWFmOGIyZTcxOTdhOWY4MGQzMDAyYThkOTQ4YzM5YTU4NDgzNTYwYzQxYiJ9LHsibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyODAwMjQsInJhbmRvbUhleCI6IjYzYWIxYWU4ZDk0MDNkY2I1NzM4NGZiNzE0NDQyYmIyMmI0NjYxN2UiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyNTAwMjIsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyODY3MTI1MDAyMiwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4M2Q3ZDAxMzdiNGE0MWNlNDczZTljZjBkNDkzZWE4OTM0YWFhZWIxYThiZGFlNzFlMWYyNTM1MDYxZDc2MjAxMTIyMDY5ZTYzOGU3ZTBkMmNiY2U1MmFiN2I3YzZlMTkwYzJlNWEzM2U1YTVkZjg0ZTJmY2ViZjllZDgwODlkMjgxYyJ9XX0=';
  t.setApitoken(BitUtil.stringToBytesUtf(apiToken)); // fake token
  t.setFee("0");
  await BlockUtil.signTxEVM(t, getUserWallet(0));
  return t;
}

async function buildCustomTxRandom() {
  const data = BitUtil.base16ToBytes(DateUtil.currentTimeMillis().toString(16));
  console.log(BitUtil.bytesToBase64(data));
  const t = new Transaction();
  t.setType(0);
  t.setCategory('CUSTOM:EMAIL');
  t.setSender('eip155:1:' + getUserWallet(0).address);
  t.setRecipientsList(
    ['eip155:1:' + getUserWallet(1).address,
      'eip155:1:' + getUserWallet(2).address]);
  t.setData(data)
  t.setSalt(IdUtil.getUuidV4AsBytes());
  const apiToken = 'VT1eyJub2RlcyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyODAwMjMsInJhbmRvbUhleCI6ImFjM2YzNjg5ZGIyMDllYjhmNDViZWEzNDU5MjRkN2ZlYTZjMTlhNmMiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyNTAwMjEsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyODY3MTI1MDAyMSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4MTA0ZmIwNTEzNTJiYTcxYjM4Zjk5M2ZhNDZiY2U2NGM2ZDMyYzBhZDRlZWYxZTgxODVjZjViMDRmYmVjOGM4YTRmMDhmYzg3MzBjZGI4NDcyMmZkYTIxMDU3MzRkOWU5MGNjMzlmZGE0ZjVkMTYxZjljOWFiNGEyMzIxM2RlZGExYyJ9LHsibm9kZUlkIjoiMHg5OEY5RDkxMEFlZjlCM0I5QTQ1MTM3YWYxQ0E3Njc1ZUQ5MGE1MzU1IiwidHNNaWxsaXMiOjE3Mjg2NzEyODAwMjAsInJhbmRvbUhleCI6Ijk5NTAyYmM4MWQyNWE2NjdlODlmYTZkNmY3ZDBjZmUxNzdmODkyZjMiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyNTAwMjIsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweGZEQUVhZjdhZkNGYmI0ZTRkMTZEQzY2YkQyMDM5ZmQ2MDA0Q0ZjZTgiLCJ0c01pbGxpcyI6MTcyODY3MTI1MDAyMSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4MmRiNjY4MTI5NGY0NGVhMzVmYWUxZGRhODhhMTIyZjk1NTBlNjg4MzIwZGY1MzU1MDJmNjQ1N2U2YmYyNmEwYzIzOGVjNDlkNTFhNGM3MTlmODhhYzEzMWFmOGIyZTcxOTdhOWY4MGQzMDAyYThkOTQ4YzM5YTU4NDgzNTYwYzQxYiJ9LHsibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyODAwMjQsInJhbmRvbUhleCI6IjYzYWIxYWU4ZDk0MDNkY2I1NzM4NGZiNzE0NDQyYmIyMmI0NjYxN2UiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3Mjg2NzEyNTAwMjIsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyODY3MTI1MDAyMiwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4M2Q3ZDAxMzdiNGE0MWNlNDczZTljZjBkNDkzZWE4OTM0YWFhZWIxYThiZGFlNzFlMWYyNTM1MDYxZDc2MjAxMTIyMDY5ZTYzOGU3ZTBkMmNiY2U1MmFiN2I3YzZlMTkwYzJlNWEzM2U1YTVkZjg0ZTJmY2ViZjllZDgwODlkMjgxYyJ9XX0=';
  t.setApitoken(BitUtil.stringToBytesUtf(apiToken)); // fake token
  t.setFee("0");
  await BlockUtil.signTxEVM(t, getUserWallet(0));
  return t;
}


describe('sample data', async function () {

  it('check some random block from UI - showing node signer addresses', async function () {
    let hex = '';
    let b = Block.deserializeBinary(BitUtil.base16ToBytes(hex));
    for (let i = 0; i < b.getSignersList().length; i++) {
      const signer = b.getSignersList()[i];
      const signerAddress = await BlockUtil.recoverSignerAddress(b, i);
      const role = i == 0 ? 'validator' : 'attestor';
      console.log(`${role} signer #${i} ${signerAddress} signed with sig: ${StrUtil.fmt(signer.getSig_asU8())}`);
    }
    const obj = b.toObject();
    console.log('b %o', obj);
    // todo add full check
    // const check = await BlockUtil.checkBlockFinalized(b);
    // console.log(check);
    // expect(check.success).to.be.equal(true);
  })
})

describe('signature tests', async function () {

  it('self-sign INIT DID and verify', async function () {
      let tx = await buildInitDidTx();
      console.log('signed tx %o', tx.toObject());
      console.log('signed tx %o', StrUtil.fmtProtoBytes(tx));
      const check = await BlockUtil.checkTxSignature(tx);
      console.log('check tx %o', check);
      expect(check.success).to.be.equal(true);
    }
  )

  it('self-sign CUSTOM ETH tx and verify', async function () {
      let tx = await buildCustomTx1();
      tx.setSignature(null); // no signature
      let wallet = getUserWallet(0);
      tx.setSender('eip155:1:' + wallet.address);
      await BlockUtil.signTxEVM(tx, wallet);
      console.log('signed tx %o', tx.toObject());
      console.log('signed tx %o', StrUtil.fmtProtoBytes(tx));
      const check = await BlockUtil.checkTxSignature(tx);
      console.log('check tx %o', check);
      expect(check.success).to.be.equal(true);
    }
  )

  it('self-sign CUSTOM SOL tx and verify', async function () {
    let tx = await buildCustomTx1();
    tx.setSignature(null); // no signature

    let solanaPrivateKey = BitUtil.base16ToBytes("ae2f9a10cac1ce71c7be3585a9af1f38de358abde0d875ad0a95352d49fbedf60fb9ba52b1f09445f1e3a7508d59f0797923acf744fbe2da303fb06da859ee87");
    const addrStr = SolUtil.convertPrivKeyToAddr(solanaPrivateKey);
    const sender = 'solana:5eykt4UsFv8P8NJdTREpY1vzqKqZKvdp:' + addrStr;
    tx.setSender(sender);
    await BlockUtil.signTxSolana(tx, solanaPrivateKey);

    console.log('signed tx %o', tx.toObject());
    console.log('signed tx %o', StrUtil.fmtProtoBytes(tx));
    const check = await BlockUtil.checkTxSignature(tx);
    console.log(check.err);
    expect(check.success).to.be.equal(true);
  });

  it('check tx from SDK - init did', async function () {
    // signed by master private key
    let hex = '1208494e49545f4449441a37707573683a6465766e65743a707573683176366d766b347466336c6b68343876786663367032686d38647a396b616a7071746b643230762abb050a423033653232663630383164376237373562353930303237633761656439323136356632623062633231333233633037386534303163336630616362356165373363311080808080081a4230326531313564613265383164363030343339613464653466353264373466653138346637616365393861386337626563343231623437316230383463633433303122aa040a37707573683a6465766e65743a70757368316d686e63366734766e756c7a34356d616775706e7975326a366573656b7237707173356a716512ee030aa8030afea186236393535376130323663396539333135633264633934662207707573683a76352a4038656631663762623864383839373335316566613062346362633864653865383539333838663964663663663166653164306535356666336334613732326239124124875750f511afcc0b85ce8ed0652a7fb2907c495b932cab5815cfe6a79a45e26fb7f3e66a50cfc92639edbd6fb3b20ef0651045a8fc0f7e80e53ba6520726ff1b3210595f97ee5a5c4c2b9bd75924d2da71393a9f0f56543165794a756232526c6379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b324e7a55334e4441774e546b73496e4a68626d52766255686c65434936496a566a4e7a426c59574d7a4f574d344e4755785a6a4d794e446b784d4745794e6d5a6c4d6a4978596a6b7a5a6a67794e4755314d7a45694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b324e7a55334d5441774f445173496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5459334e5463784d4445784f537769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344d32466c59544a6b4f4755794e5759324f4751304e7a6c694d575533595452684d6a67344d574930593245314d7a4a6c4f544d344d5445785a546b30597a417a5a4464684e6a67354d4441794f4759344d7a5578596a51775a6d4d344e54597a4d546b79596d4534597a45784d546b774f5749314e44513459546c684f546734596a6b78596d5a6a4d7a5134593249315a474e684d474d32596d466b5a5455304f4449785a4451354e44517859794a394c487369626d396b5a556c6b496a6f694d4867354f45593552446b784d45466c5a6a6c434d304935515451314d544d3359575978513045334e6a63315a5551354d4745314d7a55314969776964484e4e6157787361584d694f6a45334d6a6b324e7a55334e4441774e546b73496e4a68626d52766255686c65434936496d51345a57517a5a4445304d6a5a6d4e47597a59575a6b5a47526c4f57597a595451344e6a633559324d33597a67354d7a4a6a4d6a6b694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b324e7a55334d5441774e7a5973496e4e3059585231637949364d58307365794a756232526c535751694f69497765475a45515556685a6a64685a6b4e47596d49305a54526b4d545a45517a5932596b51794d444d355a6d51324d44413051305a6a5a5467694c434a306330317062477870637949364d5463794f5459334e5463784d4441314e537769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344e546b344e6a6b314f575269593259315a6a45305a546778596a6c6c5a475a6c5a446c6c4e475535596a526a597a41345957466b4e57466a595759314d544e6a597a45794e474d345a544d79596a45314e544d324d44426d5a444d7a4e6a4d3559545a694d5464694e545979596a5a6d4f545a6c4e574e694d5464685932526c4d4756694d7a4d344d4463324e446b31596a63324f4445774d47526d4e325a6d5954466d4e324e6a596d517859694a394c487369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b324e7a55334e4441774e7a4973496e4a68626d52766255686c65434936496a4977597a637959324d35597a67794e5463774d3249334d546c6d4f4451324d5455305a6a633459546b7a4e6a51345954646b595759694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b324e7a55334d5441774e7a5573496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5459334e5463784d4445784e437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344d324d79595449314e4455794e444d79596a55774f446b304d7a51344e544d334e4751344e7a51335a4468684e6a566b5a57557a5954457a4d6d4e6c4d7a426b596a41334e6d4e6b5a6d55304e6a4533597a55794e4451304e3259305a546731596a4269597a426a4e325a6d597a5269597a59314e575932597a6b304f546335595467334d6d55315a54426d59574e694d6a5935597a51785a444a6b5a6a59325a6a63324e6a6c6c5a6a517859694a395858303d4241aaa267e323bc5393fb127fe867431ecb890b9dc07a56040c21ad6b1b80c70168070db6c6959fa74d6c5e50c925309426c28a35f3cce86e27a6cd0bde4aff12dd1c4a0130';
    let tx = Transaction.deserializeBinary(BitUtil.base16ToBytes(hex));
    console.log('signed tx %o', tx.toObject());
    const check = await BlockUtil.checkTx(tx);
    console.log(check);
    expect(check.success).to.be.equal(true);
  })

  it('check tx from SDK - solana', async function () {
    // signed by `69EUYJKr2NE8vHFphyRPSU2tqRbXhMu9gzNo96mjvFLv`
    let hex = '1210435553544f4d3a505553485f4d41494c1a54736f6c616e613a3565796b7434557346763850384e4a64545245705931767a714b715a4b7664703a36394555594a4b72324e453876484670687952505355327471526258684d7539677a4e6f39366d6a76464c7622336569703135353a313a3078443836333443333942424664343033336330643332383943343531353237353130323432333638312a6d0a0f57656c636f6d6520546f205075736812480a46436f6e67726174756c6174696f6e73206f6e206265696e672073656c656374656420666f722050757368204164766f636174650a0a52656761726473205465616d205075736822100a085072696f726974791204486967683210b51e8e7ac9ea40858c022304b38b6d723a9f0f56543165794a756232526c6379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45304e6a41774f444173496e4a68626d52766255686c65434936496d593259544977593259785a6a4d314d44526d596d45784e7a4a6b593249794d4441324e6a55304d324d344f5449795a5449304d3245694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45304e6a41774e544973496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5449334d5451324d4441314f437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a4234597a5131597a63775a574d79596d4d784f5459324d6a6c684d5463304d47466a4f474d784d44686b4d6d466b5a6d51314d6d493159545979595445795a6a6b35595755784d474d354d57497a4e4459314d4459785a444e694d325977596d557a4d6a4e684e7a41774e4751324d4449355a446b354d4456684e6d4a6a5a6a51325a47466b5a6a51334f5749324d6a4a6d4f5441304d3259334e7a42684e32566a4d3256694e324d325932517859794a394c487369626d396b5a556c6b496a6f694d4867354f45593552446b784d45466c5a6a6c434d304935515451314d544d3359575978513045334e6a63315a5551354d4745314d7a55314969776964484e4e6157787361584d694f6a45334d6a6b794e7a45304e6a41774e6a4173496e4a68626d52766255686c65434936496d4d794f54466a595745344f44597a4e444a6d593255784d57526d4e6a6b344f446331597a566a5a5755354d32497a4d546779596a63694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45304d7a41774e6a5973496e4e3059585231637949364d58307365794a756232526c535751694f69497765475a45515556685a6a64685a6b4e47596d49305a54526b4d545a45517a5932596b51794d444d355a6d51324d44413051305a6a5a5467694c434a306330317062477870637949364d5463794f5449334d54517a4d4441334f437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a4234596a426b4d6a4e6c4d7a526b4e6a4d304d4445774e5441305a5449334d5749314e7a4d34596a6c695a6a566d59324d784d5463344d6d566a4d4445305a6d59334e6d5934593255334d7a55314e57526a5a6d49775a544d7a4e574a684f444135595756695a574d334d5459325a6a4d334d57526b4d446c6b4f4745344d544d334d7a59325a574d32597a6c6a4e7a67774e575930595751345a6d5a695a4751795a4759334f5449784d32597859794a394c487369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45304e6a41774f445173496e4a68626d52766255686c65434936496d5a6a4f574d794d6d4a6d5a4759314d6a46684e446c6b4d5755314f474e6c5a5467334e6a63774e574a6b596a52684d6a6869596d4d694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45304e6a41774e7a6373496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5449334d5451324d4441334d437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344d5755795a474e694e544a6a4e7a45325a544d345957526d5932457a595749794d7a55795a6d59794e444978595449314d446b324d44646a5a4467304e444a684f5467774e6a41335a444134596a6b344f475a684d6a4d355a544933596a49784d3245305a6d5a6d4d7a566a4f5755334d6a6c695a54413259324d795a44597a4e6a4e6b5a6a4d34596d5a6b4e4468684d7a526d595759784e5441324d4759774d7a55344d54526a4d47457859794a395858303d42408db49a8d88ea0b5a0cea8a0bf90fc51fdc870cf6a6eccc428150fbbff51a691b3a1fa19d29bc0f60bc061ad4768c5f73f602e245047629b320c96c08229ea3014a0130';
    let tx = Transaction.deserializeBinary(BitUtil.base16ToBytes(hex));
    console.log('signed tx %o', tx.toObject());
    const check = await BlockUtil.checkTx(tx);
    console.log(check);
    expect(check.success).to.be.equal(true);
  })

  it('check tx from SDK - evm', async function () {
    // signed by `eip155:1:0x35B84d6848D16415177c64D64504663b998A6ab4
    let hex = '1210435553544f4d3a505553485f4d41494c1a336569703135353a313a30783335423834643638343844313634313531373763363444363435303436363362393938413661623422336569703135353a313a3078443836333443333942424664343033336330643332383943343531353237353130323432333638312a740a0e446576636f6e205469636b65747312500a4e4465617220557365720a436f6e67726174756c6174696f6e73206f6e206265696e672073656c656374656420666f722067657474696e67207469636b65747320746f20446576636f6e203230323422100a085072696f72697479120448696768321027d5c07d7d5b4e719db21915169efb573a9f0f56543165794a756232526c6379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45794f4441774e544973496e4a68626d52766255686c65434936496a6b32596a63345a6a646d4e7a4e694d546733596a4d784e6a51794e3259314f47497a595755785a545a685a4745794d6d55304d5445694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45794e5441784f545573496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5449334d5449314d4445304e797769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42345a546b7a4e54517a4e7a686d4f4759344d57566d4e6a6b32597a5a6d4e4451305a574532596a4d794e6d55774d6a4e685932566b597a46695a6a55774d6d52694d54526d596a4934596a45344d6a4e6d596a686b4d44566b5a546c6b597a51324e7a466a5a44526a4e6d4d7a596a67784e4751305a6a493259544e6d4e574d3459574931593256684f5449354e6a55345a5455324e544e694d5463314f544e695a4755305a5455344d54517859694a394c487369626d396b5a556c6b496a6f694d4867354f45593552446b784d45466c5a6a6c434d304935515451314d544d3359575978513045334e6a63315a5551354d4745314d7a55314969776964484e4e6157787361584d694f6a45334d6a6b794e7a45794f4441774e545973496e4a68626d52766255686c65434936496d55784d475268596a51784e546c695a4467304d6a67304e5463354e7a59354e6a55314e32566a4f446b334d5463304e7a466d4d544d694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45794e5441784e544973496e4e3059585231637949364d58307365794a756232526c535751694f69497765475a45515556685a6a64685a6b4e47596d49305a54526b4d545a45517a5932596b51794d444d355a6d51324d44413051305a6a5a5467694c434a306330317062477870637949364d5463794f5449334d5449314d44457a4d437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344e6a426c4d546c6b5a54426d4e6d4d325a575a694f5449304d6a45354e5749344d446379597a6c695a5451314d7a45324d546b314d4455314e5452684e7a68694f444a6b4d5467354d7a566d4e57526b5a4455345a6a4a6b5a6d56685a4464685a6d59315a574a684f5441354e4751794e6a4a694e5446684e6a64684e6a4d344e7a4a6a4e6d59344e7a6b344e47557a4d6a67354d7a4d3359574d304e444e694e5467784e44646b4f44597859794a394c487369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45794f4441774e6a5573496e4a68626d52766255686c65434936496d59314e474d324f5451314e4467325a4755354e6a4d78596a4e6c4e575a694e57526a4e5441304f47497a4e5749334d6a426d596d45694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b794e7a45794e5441774f544573496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5449334d5449314d4445784d697769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42345a6a59305a5464685a445978595451354d7a41344e44497a597a59794d6d49354d6a4a6b4d54566b5954526d597a63324d6a6b794d546c6d596a6c684e6a63324e44646d59574d775a6d5a695a6d4d775a6a4a6a4e4459304d6d457a4e6a4531597a45304f5745324e6a566c4f5455344f444934596d4a694f44597759574d334e6d59334f5441344d7a686a5a5441344f47457a597a4579597a45324d7a55345954637a4d7a4e6b5a47557859794a395858303d424152ffaa59451eb11fca4770f5d8f958603deb189359ab3fbb9cf30793095573b87dfb8ba4d979d0a69ed48bc6a145d58ea5783b59a40ba758168ffb8961fdde391b4a0130';
    let tx = Transaction.deserializeBinary(BitUtil.base16ToBytes(hex));
    console.log('signed tx %o', tx.toObject());
    const check = await BlockUtil.checkTx(tx);
    console.log(check);
    expect(check.success).to.be.equal(true);
  })

  it('check tx from SDK - push network', async function () {
    // signed by `push:devnet:pushconsumer1ulpxwud78ctaar5zgeuhmju5k8gpz8najcvxkn`
    let hex = '1210435553544f4d3a505553485f4d41494c1a3f707573683a6465766e65743a70757368636f6e73756d657231756c707877756437386374616172357a676575686d6a75356b3867707a386e616a6376786b6e2a200a047465737412060a047465737422100a085072696f72697479120448696768321083f01bffe4ff45f6acb525a54dc7277e3a9f0f56543165794a756232526c6379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b324e7a45324d4441774e7a4173496e4a68626d52766255686c65434936496d45324d6a41324f5459314e7a51314d4445324e4449794e47526a4d444e6b4f545a6c5a5467774d4459304f54686b4d7a45304d6a45694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b324e7a45314e7a41774f446773496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5459334d5455334d4441324e437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42345a57566d4f445a694d5759314d4759324f574d794e4445314f57457a5a4449794f474d795a6a4e6c4d324579597a417a4d4749784f5449785a544a6a4e6a426b5a6a5179595745334f5467775a6a4d355a4463354e6a517a4d32566a4e324e6a4e6d49344e57497a597a64684d6a51345a6d4d7a4e7a426b5a6a67784e6a646a4e4463774f5468694d7a517a4e4751324e4745784d6d5530596a526b595745355a4749344e6a55334f44677859794a394c487369626d396b5a556c6b496a6f694d48686d524546465957593359575a44526d4a694e4755305a44453252454d324e6d4a454d6a417a4f575a6b4e6a41774e454e47593255344969776964484e4e6157787361584d694f6a45334d6a6b324e7a45324d4441774e546373496e4a68626d52766255686c65434936496a6b794d5455334d5468684e324d7a4e6d49304d6d5a6d4e325530593259334e325977593256684e6d49344e7a526b4e6a49355a6d55694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b324e7a45314e7a41774e6a4d73496e4e3059585231637949364d58307365794a756232526c535751694f69497765446b34526a6c454f5445775157566d4f55497a516a6c424e4455784d7a64685a6a4644515463324e7a566c52446b775954557a4e5455694c434a306330317062477870637949364d5463794f5459334d5455334d4441304e437769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344e545a6a4e7a466b5a44426c4d4751315a47466d4d54557a5a44686d596a686b596a646b4f5459325a6a4d355a44466c4f4467334f445a6a4e6a4178596d49794d446b785a44497759574a6c4f5755324d3246695a54426a5a44413359324a6a4e6d46694e57466a4e6d4d7a596d5a6a4d445534596a566a59324a6a4e6a67784e7a5977597a566b4d4749324e544e684f4442684d6a55304d54497a4e4746694f5751325a54517a597a557859794a394c487369626d396b5a556c6b496a6f694d4867354f45593552446b784d45466c5a6a6c434d304935515451314d544d3359575978513045334e6a63315a5551354d4745314d7a55314969776964484e4e6157787361584d694f6a45334d6a6b324e7a45324d4441774f446773496e4a68626d52766255686c65434936496a45314f474d31597a41325a4459334e5751304d44417a4e546b774f4445774e6a686a597a5130596a457a4d444e6c4d54566c4e6d51694c434a776157356e556d567a645778306379493657337369626d396b5a556c6b496a6f694d4867345a5445795a4555784d6b4d7a4e575642516d597a4e5749314e6d49774e4555314d304d30525451324f4755304e6a63794e3055344969776964484e4e6157787361584d694f6a45334d6a6b324e7a45314e7a41774e7a4173496e4e3059585231637949364d58307365794a756232526c535751694f69497765475a45515556685a6a64685a6b4e47596d49305a54526b4d545a45517a5932596b51794d444d355a6d51324d44413051305a6a5a5467694c434a306330317062477870637949364d5463794f5459334d5455334d4441314d797769633352686448567a496a6f7866563073496e4e705a323568644856795a534936496a42344e4455324d47526a4d5459774d7a5132597a457a4e54526a4f444d344f54686a4e7a63314d324a6a4d546378595459794d4455775a546379597a466a4d5456684f5455784d6a63785a6a56694d444d78596a426c597a5133596d59324e325a684e6a5577596a426c4d7a4a68596a4d774d6d5535597a6b344d546b775a444a6a597a55795a474a6b4e44566d5a4445324d3245335954646c4f574e6d596a6c6a59546b354d7a63345a47517859794a395858303d424129e393b87724b2d2b677d94a6b574f811b053b4033c3a81cac80f1f19cc9f1f723b0901d1327d2418c33a6b8647f80ee850f8c2ee477caaafb34e28c45ee13c01b4a0130';
    let tx = Transaction.deserializeBinary(BitUtil.base16ToBytes(hex));
    console.log('signed tx %o', tx.toObject());
    const check = await BlockUtil.checkTx(tx);
    console.log(check);
    expect(check.success).to.be.equal(true);
  })

  it.skip('sign STARKNET tx and check that signature matches the sender', async function () {
      // NOT SUPPORTED YES; fullPublicKey REQUIRES RPC CALL to the blockchain
      let tx = await buildCustomTx1();
      tx.setSignature(null); // no signature

      const starkNetPrivateKey = BitUtil.base16ToBytes('1234567890987654321');
      const addrStr = StarkNetUtil.convertPrivKeyToAddr(starkNetPrivateKey);
      const sender = 'starknet:SN_MAIN:0x' + addrStr;
      tx.setSender(sender);
      await BlockUtil.signTxStarkNet(tx, starkNetPrivateKey);

      console.log('signed tx %o', tx.toObject());
      console.log('signed tx %o', StrUtil.fmtProtoBytes(tx));
      const check = await BlockUtil.checkTxSignature(tx);
      console.log(check.err);
      expect(check.success).to.be.equal(true);
    }
  )

});

describe('block tests', function () {


  it('sample transaction 1', async function () {
    const t = await buildCustomTx1();
    let tBlob = t.serializeBinary();

    console.log("\n\n\ntx as base16", BitUtil.bytesToBase16(tBlob));
    console.log("\n\n\ntx as json", JSON.stringify(t.toObject()));
    let parsedT = Transaction.deserializeBinary(tBlob);
    console.log("\n\n\ntx as json (re-parsed)", JSON.stringify(parsedT.toObject()));
    console.log("\n\n\ntx api token as string", StrUtil.fmt(BitUtil.bytesUtfToString(parsedT.getApitoken_asU8())));
    console.log("\n\n\ntx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(tBlob)));

  })
  it('sample random transaction', async function () {
    const t = await buildCustomTxRandom();
    let tBlob = t.serializeBinary();

    console.log("\n\n\ntx as base16", BitUtil.bytesToBase16(tBlob));
    console.log("\n\n\ntx as json", JSON.stringify(t.toObject()));
    console.log("\n\n\ntx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(tBlob)));

  })

  // NOTE:
  // this test is very fragile
  // it breaks every time we change anything in signatures/txs/blocks/validation
  // Still it is a very good way of catching bugs, please re-generate block data after every change
  it('Block Validation Test', async function () {
    // this blob is made by feeding 'sample transaction 1' test case base16 data into the test net of 3 nodes
    let blockBase16 = "";

    // parse a pre-computed block
    // the only option is this code will pass the test = when everything is done the same way as in the backend logic
    // this is why this piece makes sense

    let oldBlock = Block.deserializeBinary(BitUtil.base16ToBytes(blockBase16));
    printObj('parsed Block', oldBlock);
    console.log('block is %o', oldBlock.toObject());
    BlockUtil.ATTESTOR_MAX_BLOCK_AGE_SECONDS = 0;
    let check1 = await BlockUtil.checkBlockFinalized(oldBlock, VALID_VNODES, 3);

    console.log('check: %o', check1);
    expect(check1.success).to.be.equal(true, check1.err);
    let oldBlockBytes = oldBlock.serializeBinary();
    const oldTx1 = oldBlock.getTxobjList()[0].getTx();
    let oldTxBytes = oldTx1.serializeBinary();
    let oldTxDataBytes = oldTx1.getData_asU8();
    console.log('parsed data %s', StrUtil.fmt(oldTxDataBytes));

    // now build the same block manually + Compare

    // build transaction data ------------------------------------

    let t = await buildCustomTx1();

    printObj('new Transaction', t);
    printObj('old Transaction', oldTx1);
    expect(oldTxBytes).to.deep.equal(t.serializeBinary());

    {
      const to1 = new TransactionObj();
      to1.setTx(t);
      const vd1 = new TxValidatorData();
      vd1.setVote(1);

      // block (BE VERY CAREFUL WITH THIS TEST)
      const block1 = new Block();
      // NOTE: comes from BLOB to be bit-equal
      block1.setTs(oldBlock.getTs());
      block1.setTxobjList([to1]);
      // NOTE: comes from BLOB to be bit-equal
      block1.setAttesttoken(oldBlock.getAttesttoken());

      const w0 = getNodeWallet(0);
      const w1 = getNodeWallet(1);
      const w2 = getNodeWallet(2);

      {
        // deep random reparse and re-construct (prob. to be removed)
        const attToken = BitUtil.bytesUtfToString(oldBlock.getAttesttoken_asU8()).substring(ValidatorRandom.VAL_TOKEN_PREFIX.length);
        console.log('attToken %s', attToken);
        const networkRandom = NetworkRandom.read(attToken);
        console.log('networkRandom', networkRandom);
        const w0random = networkRandom.nodes.find(value => value.nodeId === w0.address).randomHex;
        const w1random = networkRandom.nodes.find(value => value.nodeId === w1.address).randomHex;
        const w2random = networkRandom.nodes.find(value => value.nodeId === w2.address).randomHex;

        const validationVector = ValidatorRandom.calculateValidationVector(
          [w0.address, w1.address, w2.address],
          new Map([
            [w0.address, w0random],
            [w1.address, w1random],
            [w2.address, w2random]]),
          2,
          'attest',
          [w0.address]
        );
        console.log('validationVector %s', validationVector);

        expect(w2.address).to.deep.equal(validationVector[0], 'w1 is the first attestor');
        expect(w1.address).to.deep.equal(validationVector[1], 'w2 is the second attestor');
      }

      await BlockUtil.signBlockAsValidator(w0, block1);

      let patch2 = await BlockUtil.signBlockAsAttestor(w2, block1);
      let addr2 = await BlockUtil.recoverPatchAddress(w0, block1, patch2);
      expect(addr2).to.equal(w2.address);

      let patch1 = await BlockUtil.signBlockAsAttestor(w1, block1);
      let addr1 = await BlockUtil.recoverPatchAddress(w0, block1, patch1);
      expect(addr1).to.equal(w1.address);


      await BlockUtil.appendPatchAsValidator(w0, block1, patch2); // NODE 2 goes 1st because my sample blob has this
      await BlockUtil.appendPatchAsValidator(w0, block1, patch1);

      expect(await BlockUtil.recoverSignerAddress(block1, 0)).to.be.equal(w0.address);
      expect(await BlockUtil.recoverSignerAddress(block1, 1)).to.be.equal(w2.address); // NODE 2 goes 1st because my sample blob has this
      expect(await BlockUtil.recoverSignerAddress(block1, 2)).to.be.equal(w1.address);

      printObj('new Block', block1);
      printObj('old Block', oldBlock);
      expect(oldBlockBytes).to.deep.equal(block1.serializeBinary());
    }

  });

  it('reparse1', async function () {
    let txRaw = BitUtil.base16ToBytes("1208494e49545f4449441a336569703135353a313a30783335423834643638343844313634313531373763363444363435303436363362393938413661623422336569703135353a313a30783335423834643638343844313634313531373763363444363435303436363362393938413661623422346569703135353a39373a3078443836333443333942424664343033336330643332383943343531353237353130323432333638312a670a0f6469643a6578616d706c653a313233120e6d61737465725f7075625f6b6579220f646572697665645f7075625f6b657932330a177075736831303232326e333233326d7764656963656a331218737472696e6769666965645f656e637279707465645f706b321071d60eecc00f4cc8ac898784a7eeb98f3ab40b7b226e6f646573223a5b7b226e6f64654964223a22307838653132644531324333356541426633356235366230344535334334453436386534363732374538222c2274734d696c6c6973223a313732363134383637303032342c2272616e646f6d486578223a2262323637636131656661626366386264323063623763616336356330633534323865656664663338222c2270696e67526573756c7473223a5b7b226e6f64654964223a22307866444145616637616643466262346534643136444336366244323033396664363030344346636538222c2274734d696c6c6973223a313732363134383637303032302c22737461747573223a317d2c7b226e6f64654964223a22307839384639443931304165663942334239413435313337616631434137363735654439306135333535222c2274734d696c6c6973223a313732363134383637303031362c22737461747573223a317d5d2c227369676e6174757265223a22307834366331643237316663383637343435393138356132616265636637373736323961303133373066343366303766343965623431363235616565656631643033356431396664326164326437323232373162343166336536636231653735303338343730366162383336363437363837653539346362636462636632316165663162227d2c7b226e6f64654964223a22307839384639443931304165663942334239413435313337616631434137363735654439306135333535222c2274734d696c6c6973223a313732363134383637303032392c2272616e646f6d486578223a2263316662333961383232623964383261643264373437333230626165383634303634386632356137222c2270696e67526573756c7473223a5b7b226e6f64654964223a22307838653132644531324333356541426633356235366230344535334334453436386534363732374538222c2274734d696c6c6973223a313732363134383637303031372c22737461747573223a317d2c7b226e6f64654964223a22307866444145616637616643466262346534643136444336366244323033396664363030344346636538222c2274734d696c6c6973223a313732363134383637303032342c22737461747573223a317d5d2c227369676e6174757265223a22307866663737366563393736306235646134373238323130333862646631646363656162333130666531323030376262336634336636346236343535303264663466333733323234333066653333366535313661356336613734363038353465343033306235363334343633646338613064613135386131623063373861323630653162227d2c7b226e6f64654964223a22307866444145616637616643466262346534643136444336366244323033396664363030344346636538222c2274734d696c6c6973223a313732363134383637303033352c2272616e646f6d486578223a2262393331656334316233393763623164656234396536353764396437623739383764316361373530222c2270696e67526573756c7473223a5b7b226e6f64654964223a22307838653132644531324333356541426633356235366230344535334334453436386534363732374538222c2274734d696c6c6973223a313732363134383637303031352c22737461747573223a317d2c7b226e6f64654964223a22307839384639443931304165663942334239413435313337616631434137363735654439306135333535222c2274734d696c6c6973223a313732363134383637303032352c22737461747573223a317d5d2c227369676e6174757265223a22307837633964343832396336616161363535396465643833323433623665386438623665623333366439303932613261306466323533316463336364396532623335353735626462386261313134323263326663346262363737653064396365356266343464353466653538373266396530373661633339643530316237343934333163227d5d7d42412592af30c62ac73025e37826d60a250e7c4f44c3697d2868307255bcff52a4b61e9a3fa015761ebd89b3d9d1ce3e4a7ad4691c5259e56f8be2e79a486a1eb01b1b4a0130")
    const tx = BlockUtil.parseTx(txRaw);
    let txRaw2 = tx.serializeBinary();

    console.log('txRaw: %s', BitUtil.bytesToBase16(txRaw));
    console.log('txRaw2: %s', BitUtil.bytesToBase16(txRaw2));
    console.log('equals: ', BitUtil.bytesToBase16(txRaw) === BitUtil.bytesToBase16(txRaw2));
    console.log('processing tx: %o', tx.toObject());
    console.log('tx hash raw %s', BlockUtil.hashTxAsHex(txRaw));

    console.log('tx hash after reparse %s', BlockUtil.hashTxAsHex(txRaw2));
    console.log('reparsed tx: %o', Transaction.deserializeBinary(txRaw).toObject());
  });


  it('check 2 types of bytes in tx', async function () {
    const t = new Transaction();
    t.setType(0);
    t.setCategory('INIT_DID');
    t.setSender('eip155:1:0xAA');
    t.setRecipientsList(['eip155:1:0xBB', 'eip155:1:0xCC']);
    t.setData(new Uint8Array());
    t.setSalt(IdUtil.getUuidV4AsBytes()); // uuid.parse(uuid.v4())

    t.setFee("1"); // tbd
    t.setSignature(BitUtil.base16ToBytes("EE")); // fake signature
    console.log("-".repeat(40));
    console.log("tx as json", JSON.stringify(t.toObject()));


    let token = "eyJub2RlcyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMzAsInJhbmRvbUhleCI6ImY3YmY3YmYwM2ZlYTBhNzI1MTU2OWUwNWRlNjU2ODJkYjU1OTU1N2UiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNDY3MzI0MDAxOSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4YjMzM2NjMWI3MWM0NGM0MDhkOTZiN2JmYjYzODU0OTNjZjE2N2NiMmJkMjU1MjdkNzg2ZDM4ZjdiOTgwZWFkMzAxMmY3NmNhNzhlM2FiMWEzN2U2YTFjY2ZkMjBiNjkzZGVmZDAwOWM4NzExY2ZjODlmMDUyYjM5MzY4ZjFjZTgxYiJ9LHsibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjUsInJhbmRvbUhleCI6IjkyMTY4NzRkZjBlMTQ4NTk3ZjlkNDRkMGRmZmFlZGU5NTg0NGRkMTciLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyMjQ2NTAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNDY3MzIyNDY1NSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4N2JmYzQ0MjQ0ZGM0MTdhMjg0YzEwODUwZGEzNTE2YzUwNWEwNjJmYjIyYmI1ODU0ODg2YWEyOTk3OWUwMmYxOTdlZWMyYzk2ZDVkOTQ4ZDBhMWQ2NTBlYzIzNGRhMDVjMGY5M2JlNWUyMDkxNjFlYzJjY2JjMWU5YzllNzQyOGIxYiJ9LHsibm9kZUlkIjoiMHg5OEY5RDkxMEFlZjlCM0I5QTQ1MTM3YWYxQ0E3Njc1ZUQ5MGE1MzU1IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjQsInJhbmRvbUhleCI6IjBkOWExNmE4OTljYWQwZWZjODgzZjM0NWQwZjgwYjdmYTE1YTY1NmYiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyMjY5NDMsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweGZEQUVhZjdhZkNGYmI0ZTRkMTZEQzY2YkQyMDM5ZmQ2MDA0Q0ZjZTgiLCJ0c01pbGxpcyI6MTcyNDY3MzIyNjk0Nywic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4YmE2Mjk2OTZlZWU4MDQ4ZDE2OTA3MDNhZmVjYWY4ZmJjM2Y4NDMxOWQ0OTFhZGIzY2YzZGYzMzExMTllMDAyOTA1MTc3MjAyNzkxNzEzNTMzMmU0MGZiMzI2OTM5Y2JhN2Y2NDc2NmYyYjY5MzQwZTZlNGYwZmIzNjM2OThmYzkxYiJ9XX0=";
    t.setApitoken(token);

    // A have a sting in base64, you want to set(Uint8Array)

    let txAsBytes = t.serializeBinary();
    console.log("tx as base16", BitUtil.bytesToBase16(txAsBytes));
    console.log("tx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(txAsBytes)));

    t.setApitoken(BitUtil.base64ToBytes(token));
    let txAsBytes2 = t.serializeBinary();
    console.log("tx as base16", BitUtil.bytesToBase16(txAsBytes2));
    console.log("tx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(txAsBytes2)));

  })


  it('create transaction and block, serialize/deserialize', async function () {
    console.log("building ------------------------- ");
    // build transaction data (app-dependent)
    const data = new InitDid();
    data.setMasterpubkey('0xBB');
    data.setDerivedkeyindex(1);
    data.setDerivedpubkey('0xCC');
    console.log("data as json", JSON.stringify(data.toObject()));

    // build transaction
    const t = new Transaction();
    t.setType(0);
    t.setCategory('INIT_DID');
    t.setSender('eip155:1:0xAA');
    t.setRecipientsList(['eip155:1:0xBB', 'eip155:1:0xCC']);
    t.setData(data.serializeBinary())
    t.setSalt(IdUtil.getUuidV4AsBytes()); // uuid.parse(uuid.v4())
    let token = "eyJub2RlcyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMzAsInJhbmRvbUhleCI6ImY3YmY3YmYwM2ZlYTBhNzI1MTU2OWUwNWRlNjU2ODJkYjU1OTU1N2UiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNDY3MzI0MDAxOSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4YjMzM2NjMWI3MWM0NGM0MDhkOTZiN2JmYjYzODU0OTNjZjE2N2NiMmJkMjU1MjdkNzg2ZDM4ZjdiOTgwZWFkMzAxMmY3NmNhNzhlM2FiMWEzN2U2YTFjY2ZkMjBiNjkzZGVmZDAwOWM4NzExY2ZjODlmMDUyYjM5MzY4ZjFjZTgxYiJ9LHsibm9kZUlkIjoiMHhmREFFYWY3YWZDRmJiNGU0ZDE2REM2NmJEMjAzOWZkNjAwNENGY2U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjUsInJhbmRvbUhleCI6IjkyMTY4NzRkZjBlMTQ4NTk3ZjlkNDRkMGRmZmFlZGU5NTg0NGRkMTciLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyMjQ2NTAsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweDk4RjlEOTEwQWVmOUIzQjlBNDUxMzdhZjFDQTc2NzVlRDkwYTUzNTUiLCJ0c01pbGxpcyI6MTcyNDY3MzIyNDY1NSwic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4N2JmYzQ0MjQ0ZGM0MTdhMjg0YzEwODUwZGEzNTE2YzUwNWEwNjJmYjIyYmI1ODU0ODg2YWEyOTk3OWUwMmYxOTdlZWMyYzk2ZDVkOTQ4ZDBhMWQ2NTBlYzIzNGRhMDVjMGY5M2JlNWUyMDkxNjFlYzJjY2JjMWU5YzllNzQyOGIxYiJ9LHsibm9kZUlkIjoiMHg5OEY5RDkxMEFlZjlCM0I5QTQ1MTM3YWYxQ0E3Njc1ZUQ5MGE1MzU1IiwidHNNaWxsaXMiOjE3MjQ2NzMyNDAwMjQsInJhbmRvbUhleCI6IjBkOWExNmE4OTljYWQwZWZjODgzZjM0NWQwZjgwYjdmYTE1YTY1NmYiLCJwaW5nUmVzdWx0cyI6W3sibm9kZUlkIjoiMHg4ZTEyZEUxMkMzNWVBQmYzNWI1NmIwNEU1M0M0RTQ2OGU0NjcyN0U4IiwidHNNaWxsaXMiOjE3MjQ2NzMyMjY5NDMsInN0YXR1cyI6MX0seyJub2RlSWQiOiIweGZEQUVhZjdhZkNGYmI0ZTRkMTZEQzY2YkQyMDM5ZmQ2MDA0Q0ZjZTgiLCJ0c01pbGxpcyI6MTcyNDY3MzIyNjk0Nywic3RhdHVzIjoxfV0sInNpZ25hdHVyZSI6IjB4YmE2Mjk2OTZlZWU4MDQ4ZDE2OTA3MDNhZmVjYWY4ZmJjM2Y4NDMxOWQ0OTFhZGIzY2YzZGYzMzExMTllMDAyOTA1MTc3MjAyNzkxNzEzNTMzMmU0MGZiMzI2OTM5Y2JhN2Y2NDc2NmYyYjY5MzQwZTZlNGYwZmIzNjM2OThmYzkxYiJ9XX0=";
    t.setApitoken(BitUtil.base64ToBytes(token)); // fake token


    // A have a sting in base64, you want to set(Uint8Array)

    t.setFee("1"); // tbd
    t.setSignature(BitUtil.base16ToBytes("EE")); // fake signature
    console.log("-".repeat(40));
    console.log("tx as json", JSON.stringify(t.toObject()));

    const txAsBytes = t.serializeBinary();
    console.log("tx as base16", BitUtil.bytesToBase16(txAsBytes));
    console.log("tx hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(txAsBytes)));
    // build block

    // transactions
    const to = new TransactionObj();
    to.setTx(t);
    const vd = new TxValidatorData();
    vd.setVote(1);
    const ad = new TxAttestorData();
    ad.setVote(1);
    to.setValidatordata(vd);
    to.setAttestordataList([ad]);

    // signers
    const s1 = new Signer();
    s1.setSig(BitUtil.base16ToBytes('CC'));
    const s2 = new Signer();
    s2.setSig(BitUtil.base16ToBytes('EE'));

    const b = new Block();
    b.setTs(DateUtil.currentTimeSeconds());
    b.setTxobjList([to]);
    b.setAttesttoken('DD'); // fake attest token
    b.setSignersList([s1, s2]);
    b.setAttesttoken(BitUtil.base16ToBytes("C1CC"));
    console.log("block as json", JSON.stringify(b.toObject()));

    const blockAsBytes = b.serializeBinary();
    console.log("block as base16", BitUtil.bytesToBase16(blockAsBytes));
    console.log("block hash", BitUtil.bytesToBase16(HashUtil.sha256AsBytes(blockAsBytes)));


    // PARSE it back into objects
    console.log("parsing ------------------------- ");
    let t2 = Transaction.deserializeBinary(txAsBytes);
    console.log("tx2 as json", JSON.stringify(t2.toObject()));

    let b2 = Block.deserializeBinary(blockAsBytes);
    console.log("block2 as json", JSON.stringify(b2.toObject()));
  });

  it('test for setting data as string (do not use this)', async function () {
    const t = new Transaction();
    let originalData = "AABB";
    console.log('assign data ', originalData);
    let encoded = BitUtil.bytesToBase64(BitUtil.base16ToBytes("AABB"));
    console.log('encoded for assignment ', encoded);
    t.setData(encoded);
    console.log("t as bin", BitUtil.bytesToBase16(t.serializeBinary()));
    let protoEncodedAndDecoded: any = Transaction.deserializeBinary(t.serializeBinary()).getData();
    console.log('expeced assigned data, to be ', originalData, "but got", protoEncodedAndDecoded, '=', BitUtil.bytesToBase16(protoEncodedAndDecoded));
  });

})


// for printing the wallet info
async function loadWalletInfos(): Promise<WalletInfo[]> {
  const walletFiles = [
    {name: 'v1', filePath: 'docker/v1/validator_eth_key.json', password: 'test'},
    {name: 'v2', filePath: 'docker/v2/validator_eth_key.json', password: 'test'},
    {name: 'v3', filePath: 'docker/v3/validator_eth_key.json', password: 'test'},
  ];

  const walletInfos: WalletInfo[] = await Promise.all(
    walletFiles.map(async ({filePath, password}) => {
      const json = fs.readFileSync(filePath, 'utf8');
      const wallet = await Wallet.fromEncryptedJson(json, password);
      return {
        address: wallet.address,
        publicKey: wallet.publicKey,
        privateKey: wallet.privateKey,
      };
    })
  );
  return walletInfos;
}


describe('sharding tests', function () {
  it('calculate shard', async function () {

    let sample = [
      'eip155:1:0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb',
      'eip155:0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb',
      'bip122:000000000019d6689c085ae165831e93:128Lkh3S7CkDTBZ8W7BbpsN3YYizJMp8p6',
      'cosmos:cosmoshub-3:cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0',
      'polkadot:b0a8d493285c2df73290dfb7e61f870f:5hmuyxw9xdgbpptgypokw4thfyoe3ryenebr381z9iaegmfy',
      'starknet:SN_GOERLI:0x02dd1b492765c064eac4039e3841aa5f382773b598097a40073bd8b48170ab57',
      'hedera:mainnet:0.0.1234567890-zbhlt'
    ];

    for (const s of sample) {
      console.log('%s maps to shard %s', s, BlockUtil.calculateAffectedShard(s, 32));
    }
  });


  it('calculate shards', async function () {

    let sample = [
      'eip155:1:0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb',
      'eip155:0xab16a96D359eC26a11e2C2b3d8f8B8942d5Bfcdb',
      'bip122:000000000019d6689c085ae165831e93:128Lkh3S7CkDTBZ8W7BbpsN3YYizJMp8p6',
      'cosmos:cosmoshub-3:cosmos1t2uflqwqe0fsj0shcfkrvpukewcw40yjj6hdc0',
      'polkadot:b0a8d493285c2df73290dfb7e61f870f:5hmuyxw9xdgbpptgypokw4thfyoe3ryenebr381z9iaegmfy',
      'starknet:SN_GOERLI:0x02dd1b492765c064eac4039e3841aa5f382773b598097a40073bd8b48170ab57',
      'hedera:mainnet:0.0.1234567890-zbhlt'
    ];

    let addrs = ChainUtil.generateRandomAddresses(sample, 1000)
    console.log(addrs);

    const MAX_SHARDS = 64;
    for (let shardCount = 1; shardCount < MAX_SHARDS; shardCount++) {


      /*
      Map checks for this case
        shard1 -> 5 addresses
        shard2 -> 3 addresses
        shard0 -> 0 addresses (bad!)
       */
      let shardToNumOfAddresses: Map<number, number> = new Map();
      for (const a of addrs) {
        let shardId = BlockUtil.calculateAffectedShard(a, shardCount);
        // console.log('shardId: %s -> %s', a, shardId);
        assert.isTrue(shardId != null && shardId >= 0);
        assert.isTrue(shardId < shardCount);

        let oldCounter = shardToNumOfAddresses.get(shardId);
        if (oldCounter == null) {
          shardToNumOfAddresses.set(shardId, 1);
        } else {
          shardToNumOfAddresses.set(shardId, ++oldCounter);
        }
      }
      if (shardCount > 4) {
        let minSize = 100000000000;
        let maxSize = 0;
        for (const [shardId, count] of shardToNumOfAddresses) {
          // console.log('shardId: %s has %s addresses', shardId, count);
          minSize = Math.min(minSize, count);
          maxSize = Math.max(maxSize, count);
        }
        const delta = maxSize - minSize;
        const maxDelta = addrs.length / 10;
        if (delta > maxDelta) {
          console.log('shardCount: %s is not balanced', shardCount);
        }
      }
    }

  })
});
